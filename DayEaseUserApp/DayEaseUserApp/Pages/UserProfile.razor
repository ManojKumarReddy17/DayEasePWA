@page "/user-profile"
@using Domain.RequestModels
@inject ILocalStorageService LocalStorage
@using Blazored.LocalStorage
@using System.Text;
@using System.Text.Json;
@using System;
@using System.Collections.Generic;
@inject IRegistration RegistrationService
@using DayEaseServices.Services.IServices
@inject NavigationManager NavigationManager

@using System.ComponentModel.DataAnnotations

@inject NavigationManager Navigation

<style>
    html, body {
        margin: 0;
        padding: 0;
        height: 100%;
        width: 100%;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        background-color: #008CFF;
        background-image: url('/images/login-bg.png');
        background-size: cover;
        background-position: center;
        overflow-x: hidden;
        overflow-y: auto;
    }

    .title {
        text-align: center;
        font-size: 2rem;
        font-weight: 800;
        color: #1e3a8a;
        margin-bottom: 2rem;
        text-shadow: 0 1px 2px rgba(30, 58, 138, 0.2);
    }

    .form-container {
        background: #ffffff;
        max-width: 500px;
        margin: auto;
        padding: 2.5rem 2rem;
        border-radius: 1.25rem;
        box-shadow: 0 12px 25px rgba(59, 130, 246, 0.15);
        border: 1px solid #bfdbfe;
        transition: transform 0.3s ease;
    }

        .form-container:hover {
            transform: translateY(-6px);
        }

    .form-group {
        margin-bottom: 1.5rem;
    }

        .form-group label {
            display: block;
            font-weight: 600;
            color: #1d4ed8;
            margin-bottom: 0.4rem;
            font-size: 0.95rem;
        }

    .input {
        width: 100%;
        padding: 0.75rem 1rem;
        border: 1px solid #93c5fd;
        border-radius: 0.75rem;
        font-size: 1rem;
        transition: all 0.2s ease;
        background-color: #f8fafc;
        color: #1e293b;
    }

        .input:focus {
            border-color: #2563eb;
            box-shadow: 0 0 0 2px #60a5fa;
            outline: none;
            background-color: #ffffff;
        }

    .btn-primary {
        width: 100%;
        background: linear-gradient(to right, #3b82f6, #1e40af);
        color: white;
        font-weight: 700;
        padding: 0.85rem;
        font-size: 1.05rem;
        border: none;
        border-radius: 0.75rem;
        cursor: pointer;
        transition: background 0.3s ease;
    }

        .btn-primary:hover {
            background: linear-gradient(to right, #2563eb, #1e3a8a);
        }

    /* Modal Styles */
    .modal-backdrop {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0,0,0,0.6);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 9999;
    }

    .modal-box {
        background: white;
        color: black;
        padding: 1.5rem 2rem;
        border-radius: 10px;
        width: 300px;
        text-align: center;
        box-shadow: 0 4px 15px rgba(0,0,0,0.3);
    }

        .modal-box p {
            margin-bottom: 1rem;
            font-weight: 600;
            color: black;
        }

    .btn-primary-modal {
        background-color: #00c2ff;
        color: white;
        border: none;
        padding: 10px 20px;
        margin-right: 10px;
        border-radius: 6px;
        cursor: pointer;
    }

        .btn-primary-modal:hover {
            background-color: #009edb;
        }

    .btn-secondary-modal {
        background-color: #ccc;
        color: black;
        border: none;
        padding: 10px 20px;
        border-radius: 6px;
        cursor: pointer;
    }

        .btn-secondary-modal:hover {
            background-color: #aaa;
        }

</style>


<h2 class="title">User Profile</h2>


<EditForm EditContext="@editContext">
    <DataAnnotationsValidator />
    <ValidationSummary />


    <div class="form-container">

        <div class="form-group">
            <label>First Name</label>
            <InputText @bind-Value="userModel.FName" class="input" />
            <ValidationMessage For="@(() => userModel.FName)" />
        </div>

        <div class="form-group">
            <label>Last Name</label>
            <InputText @bind-Value="userModel.LName" class="input" />
            <ValidationMessage For="@(() => userModel.LName)" />
        </div>

        <div class="form-group">
            <label>Phone Number</label>
            <InputText @bind-Value="userModel.PhoneNumber" class="input" disabled />
        </div>


        <div class="form-group">
            <label>Gender</label>
            <InputSelect @bind-Value="userModel.Gender" class="input">
                <option value="">-- Select Gender --</option>
                <option>Male</option>
                <option>Female</option>

            </InputSelect>
            <ValidationMessage For="@(() => userModel.Gender)" />
        </div>

        <div class="form-group">
            <label>Country</label>
            <InputText @bind-Value="userModel.Country" class="input" disabled />
        </div>
        <div class="form-group">
            <label>State</label>
            <InputSelect @bind-Value="SelectedStateId" class="input">
                <option value="">-- Select State --</option>
                @foreach (var state in stateList)
                {
                    <option value="@state.StateId">@state.StateName</option>
                }
            </InputSelect>
            <ValidationMessage For="@(() => userModel.State)" />
        </div>
        <div class="form-group">
            <label>City</label>
            <InputSelect @bind-Value="SelectedCityId" class="input">
                <option value="">-- Select City --</option>
                @foreach (var city in cityList)
                {
                    <option value="@city.CityId">@city.CityName</option>
                }
            </InputSelect>
            <ValidationMessage For="@(() => userModel.City)" />
        </div>

        <div class="form-group">
            <label>Location</label>
            <InputSelect @bind-Value="SelectedAreaId" class="input">
                <option value="">-- Select Location --</option>
                @foreach (var location in areaList)
                {
                    <option value="@location.AreaId">@location.AreaName</option>
                }
            </InputSelect>
            <ValidationMessage For="@(() => userModel.Location)" />
        </div>

        <div class="form-group">
            <label>Sublocation (Area)</label>
            <InputSelect @bind-Value="userModel.Sublocation" class="input">
                <option value="">-- Select Sublocation --</option>
                @foreach (var sub in subareaList)
                {
                    <option value="@sub.SubAreaId">@sub.SubAreaName</option>
                }
            </InputSelect>
            <ValidationMessage For="@(() => userModel.Sublocation)" />
        </div>

        <div class="form-group">
            <label>Latitude</label>
            <InputText @bind-Value="userModel.Latitude" class="input" />
            <ValidationMessage For="@(() => userModel.Latitude)" />
        </div>

        <div class="form-group">
            <label>Longitude</label>
            <InputText @bind-Value="userModel.Longitude" class="input" />
            <ValidationMessage For="@(() => userModel.Longitude)" />
        </div>



        <div class="form-group">
            <label>Address</label>
            <InputTextArea @bind-Value="userModel.Address" class="input" />
            <ValidationMessage For="@(() => userModel.Address)" />
        </div>

        <!-- Update Button -->
        @* <div class="form-group text-center"> *@
        @*     <button type="button" class="btn btn-primary" @onclick="OnUpdateProfileClick">Update Profile</button> *@
        @* </div> *@

        @* <div class="form-group text-center"> *@
        @*     <button type="button" *@
        @*             class="btn btn-primary" *@
        @*             @onclick="OnUpdateProfileClick" *@
        @*             disabled="@(!isModified)"> *@
        @*         Update Profile *@
        @*     </button> *@
        @* </div> *@

        <div class="form-group text-center">
            <button type="button" class="btn btn-primary" @onclick="OnUpdateProfileClick" disabled="@(!IsFormUpdated)">Update Profile</button>
        </div>
    </div>

</EditForm>

@if (ShowUserExistsModal)
{
    <div class="modal-backdrop">
        <div class="modal-box">
            <p> User updated successfully</p>
            <button class="btn-primary-modal" @onclick="NavigateToLogin">OK</button>

        </div>
    </div>
}

@code {
    private UserModel userModel = new();
    private List<StateModel> stateList = new();
    private List<CityModel> cityList = new();
    private List<AreaModel> areaList = new();
    private List<SubAreaModel> subareaList = new();
    private EditContext editContext;
    private bool ShowUserExistsModal = false;
    // private bool isModified = false;
    private UserModel originalUserModel = new(); // For comparison
    private bool IsFormUpdated = false;


    private string SelectedStateId
    {
        get => userModel.State;
        set
        {
            if (userModel.State != value)
            {
                userModel.State = value;
                userModel.City = null;
                userModel.Location = null;
                userModel.Sublocation = null;
                _ = LoadCitiesAsync();
            }
        }
    }

    private string SelectedCityId
    {
        get => userModel.City;
        set
        {
            if (userModel.City != value)
            {
                userModel.City = value;
                userModel.Location = null;
                userModel.Sublocation = null;
                _ = LoadAreasAsync();
            }
        }
    }

    private string SelectedAreaId
    {
        get => userModel.Location;
        set
        {
            if (userModel.Location != value)
            {
                userModel.Location = value;
                userModel.Sublocation = null;
                _ = LoadSubAreasAsync();
            }
        }
    }



    private void NavigateToLogin()
    {
        NavigationManager.NavigateTo("/highlightcompact");
    }

    protected override void OnInitialized()
    {
        editContext = new EditContext(userModel);
        editContext.OnFieldChanged += OnFieldChanged;
    }
    // protected override void OnInitialized()
    // {
    //     editContext = new EditContext(userModel);
    //     editContext.OnFieldChanged += (_, __) =>
    //     {
    //         isModified = true;
    //         StateHasChanged();
    //     };
    // }
    private void OnFieldChanged(object? sender, FieldChangedEventArgs e)
    {
        // Compare current model with original
        IsFormUpdated = !JsonSerializer.Serialize(userModel).Equals(JsonSerializer.Serialize(originalUserModel));
        StateHasChanged();
    }
    private async Task OnUpdateProfileClick()
    {
        if (!editContext.Validate())
        {
            // Proceed if form is valid
            var response = await RegistrationService.UpdateUser(userModel);

            if (response.Success == true)
            {

                ShowUserExistsModal = true;
                originalUserModel = JsonSerializer.Deserialize<UserModel>(JsonSerializer.Serialize(userModel));
                IsFormUpdated = false;

            }
        }
        else
        {
            Console.WriteLine("Form validation failed.");
        }

    }


    protected override async Task OnInitializedAsync()
    {
        var jwtToken = await LocalStorage.GetItemAsync<string>("JwtToken");

        if (!string.IsNullOrEmpty(jwtToken))
        {
            var claims = JwtHelper.DecodePayload(jwtToken);

            userModel.FName = claims.TryGetValue("FName", out var fname) ? fname?.ToString() : "";
            userModel.LName = claims.TryGetValue("LName", out var lname) ? lname?.ToString() : "";
            userModel.PhoneNumber = claims.TryGetValue("PhoneNumber", out var phone) ? phone?.ToString() : "";
            userModel.Gender = claims.TryGetValue("Gender", out var gender) ? gender?.ToString() : "";
            userModel.Country = claims.TryGetValue("Country", out var country) ? country?.ToString() : "";
            userModel.State = claims.TryGetValue("State", out var state) ? state?.ToString() : "";
            userModel.City = claims.TryGetValue("City", out var city) ? city?.ToString() : "";
            userModel.Location = claims.TryGetValue("Location", out var location) ? location?.ToString() : "";
            userModel.Sublocation = claims.TryGetValue("Sublocation", out var sublocation) ? sublocation?.ToString() : "";
            userModel.Latitude = claims.TryGetValue("Latitude", out var lat) ? lat?.ToString() : "";
            userModel.Longitude = claims.TryGetValue("Longitude", out var lng) ? lng?.ToString() : "";
            userModel.Address = claims.TryGetValue("Address", out var address) ? address?.ToString() : "";

            originalUserModel = JsonSerializer.Deserialize<UserModel>(JsonSerializer.Serialize(userModel));
        }

        // Load all dropdown data
        stateList = await RegistrationService.GetStatesAsync();
        if (!string.IsNullOrWhiteSpace(userModel.State))
        {
            await LoadCitiesAsync();
        }

        if (!string.IsNullOrWhiteSpace(userModel.City))
        {
            await LoadAreasAsync();
        }

        if (!string.IsNullOrWhiteSpace(userModel.Location))
        {
            await LoadSubAreasAsync();
        }
    }


    private async Task LoadCitiesAsync()
    {
        if (!string.IsNullOrWhiteSpace(userModel.State))
            cityList = await RegistrationService.GetCityAsync(new CityModel { StateId = userModel.State });
        else
            cityList.Clear();

        areaList.Clear();
        subareaList.Clear();
        await InvokeAsync(StateHasChanged);
    }

    private async Task LoadAreasAsync()
    {
        if (!string.IsNullOrWhiteSpace(userModel.City))
            areaList = await RegistrationService.GetAreaByCityId(new AreaModel { CityId = userModel.City });
        else
            areaList.Clear();

        subareaList.Clear();
        await InvokeAsync(StateHasChanged);
    }

    private async Task LoadSubAreasAsync()
    {
        if (!string.IsNullOrWhiteSpace(userModel.Location))
            subareaList = await RegistrationService.GetSubAreaByAreaId(new SubAreaModel { AreaId = userModel.Location });
        else
            subareaList.Clear();

        await InvokeAsync(StateHasChanged);
    }


    public static class JwtHelper
    {
        public static Dictionary<string, object> DecodePayload(string token)
        {
            if (string.IsNullOrEmpty(token))
                throw new ArgumentException("Token cannot be null or empty.");

            var parts = token.Split('.');
            if (parts.Length != 3)
                throw new ArgumentException("Invalid JWT token format.");

            string payload = parts[1];

            payload = PadBase64(payload);

            var jsonBytes = Convert.FromBase64String(payload);
            var json = Encoding.UTF8.GetString(jsonBytes);

            var result = JsonSerializer.Deserialize<Dictionary<string, object>>(json);
            return result!;
        }

        private static string PadBase64(string base64)
        {
            // JWT base64 strings are often missing padding characters
            switch (base64.Length % 4)
            {
                case 2: return base64 + "==";
                case 3: return base64 + "=";
                case 0: return base64;
                default: throw new FormatException("Invalid base64 string");
            }
        }
    }
}
