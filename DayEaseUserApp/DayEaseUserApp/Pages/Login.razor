@page "/Login"
@using Domain.RequestModels
@inject IUserLoginService userloginservice
@inject UserLocationState UserLocation
@using DayEaseServices.Services.IServices
@inject NavigationManager NavigationManager
@inject HttpClient Http

<style>
    html, body {
        margin: 0;
        padding: 0;
        height: 100%;
        width: 100%;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        background-color: #008CFF;
        background-image: url('/images/login-bg.png'); /* Confetti-style background */
        background-size: cover;
        background-repeat: no-repeat;
        background-position: center;
        overflow-x: hidden;
        overflow-y: auto;
    }

    .main-container {
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        min-height: 100vh;
        padding: 1rem;
        text-align: center;
    }

    .logo {
        width: 120px;
        height: auto;
        margin-bottom: 1.5rem;
    }

    h5 {
        color: #ffffff;
        font-size: 2rem;
        margin-bottom: 1.5rem;
    }

    .form-group {
        margin-bottom: 1rem;
        width: 100%;
        max-width: 350px;
        text-align: left;
    }

    label {
        color: #ffffff;
        font-weight: 600;
        font-size: 1rem;
        margin-bottom: 0.5rem;
        display: block;
    }

    input.form-control {
        width: 320px;
        padding: 0.75rem;
        font-size: 1rem;
        border-radius: 10px;
        border: none;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        box-sizing: border-box;
    }

    .btn-primary {
        background: #00CFFF;
        color: #fff;
        font-weight: bold;
        padding: 0.75rem;
        border: none;
        border-radius: 10px;
        font-size: 1rem;
        width: 100%;
        max-width: 350px;
        cursor: pointer;
        margin-top: 1rem;
        transition: background 0.3s;
    }

        .btn-primary:hover {
            background: #00b8e6;
        }

    .forgot-link a,
    .text-center a {
        color: #ffffff;
        font-weight: 600;
        font-size: 0.95rem;
        text-decoration: underline;
    }

    .alert-danger {
        background-color: #f8d7da;
        color: #721c24;
        padding: 0.75rem;
        margin-bottom: 1rem;
        border-radius: 8px;
        max-width: 350px;
        width: 100%;
    }

    .validation-error {
        color: red;
        font-size: 0.9rem;
        margin-top: 0.25rem;
    }

    .password-wrapper {
        position: relative;
    }

    .password-input {
        padding-right: 40px; /* space for the eye icon */
    }

    .password-toggle {
        position: absolute;
        top: 50%;
        right: 10px;
        transform: translateY(-50%);
        cursor: pointer;
        color: #999;
        font-size: 1.1rem;
    }
</style>



<div class="main-container">

        <img src="images/login-logo_v01.png" alt="Day Ease Logo" class="logo" />

        <div class="login-form">
            <h5>Login</h5>

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger">@errorMessage</div>
            }

            <EditForm Model="loginModel" OnValidSubmit="HandleLogin">
                <DataAnnotationsValidator />


            <div class="form-group">
                <label for="phonenumber">Mobile Number:</label>

                <div class="input-group">
                    <span class="input-group-text">+91</span>
                    <input id="phonenumber"
                           class="form-control"
                           @bind="loginModel.phonenumber"
                           @oninput="LimitToTenDigits"
                           onkeypress="return isNumberKey(event)"
                           placeholder="Enter 10-digit mobile number"
                           maxlength="10"
                           inputmode="numeric"
                           pattern="[0-9]*" />
                </div>

                <ValidationMessage For="@(() => loginModel.phonenumber)" />
            </div>

            <div class="form-group">
                <label>Password:</label>
                <div class="password-wrapper">
                    <InputText @bind-Value="loginModel.password"
                               type="@PasswordInputType"
                               class="form-control password-input"
                               maxlength="15"
                               @oninput="OnPasswordInput"
                               @onfocus="() => ShowPasswordRules = true"
                               @onblur="() => ShowPasswordRules = false" />
                    <span class="password-toggle" @onclick="TogglePasswordVisibility">
                        <i class="@((ShowPassword ? "fa fa-eye-slash" : "fa fa-eye"))"></i>
                    </span>
                </div>
                <ValidationMessage For="@(() => loginModel.password)" class="validation-message" />

          
            </div>

             

                <div class="form-group d-flex align-items-center justify-content-between">
                    <div class="forgot-link">
                        <a href="/forgotpassword">Forgot Password?</a>
                        
                    </div>
                </div>

                <button type="submit" class="btn btn-primary">LOGIN</button>
            </EditForm>
            <div class="text-center mt-3">
                <a href="/mobile-number" class="text-decoration-none">Didn't have an account ? Register</a>
            </div>
        </div>

</div>

@code {
    private UserLoginRequest loginModel = new();
    private string errorMessage;
    private bool ShowPasswordRules = false;
    private bool IsPasswordValid = false;
    private bool ShowPassword = false;

    private string PasswordInputType => ShowPassword ? "text" : "password";

    private void TogglePasswordVisibility()
    {
        ShowPassword = !ShowPassword;
    }

    private async Task HandleLogin()
    {
        errorMessage = null;

        var response = await userloginservice.PostAsync(loginModel);

        if (response != null && !string.IsNullOrEmpty(response.JwtToken))
        {
            // ✅ Save AreaId, Latitude, Longitude to shared state
            UserLocation.AreaId = response.AreaId;
            UserLocation.Latitude = response.Latitude;
            UserLocation.Longitude = response.Longitude;

            // ✅ Redirect to highlight page
            NavigationManager.NavigateTo("/highlightnew");
        }
        else
        {
            errorMessage = response?.Message ?? "Invalid username or password.";
        }
    }

    private void LimitToTenDigits(ChangeEventArgs e)
    {
        var input = e.Value?.ToString();
        if (input != null)
        {
            loginModel.phonenumber = new string(input.Where(char.IsDigit).Take(10).ToArray());
        }
    }
    private void OnPasswordInput(ChangeEventArgs e)
    {
        var password = e.Value?.ToString() ?? "";
        loginModel.password = password;
        IsPasswordValid = IsValidPassword(password);
    }
    private bool IsValidPassword(string password)
    {
        return !string.IsNullOrWhiteSpace(password) &&
               password.Length >= 7 &&
               password.Length <= 15 &&
               password.Any(char.IsLower) &&
               password.Any(char.IsUpper) &&
               password.Any(char.IsDigit) &&
               password.Any(ch => "!@#$%^&*()_+-=[]{}|;:,.<>?".Contains(ch));
    }
}