@page "/checkout"
@inject CartState CartState
@inject NavigationManager Navigation
@using DayEaseServices.Services.IServices
@using Domain.DomainModels
@using Domain.RequestModels
@inject IOrderService OrderService

<style>
    .cart-wrapper {
        background-color: #f8f9fa;
        padding: 20px 0 80px;
        border-radius: 16px;
        max-width: 800px;
        margin: auto;
        box-shadow: 0 2px 12px rgba(0, 0, 0, 0.05);
    }

    .cart-header {
        background: linear-gradient(135deg, #007bff, #00c6ff);
        color: white;
        text-align: center;
        padding: 16px;
        font-size: 20px;
        font-weight: bold;
        border-radius: 16px 16px 0 0;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 10px;
    }

    .item-image-wrapper {
        flex: 0 0 60px;
    }

    .cart-icon {
        font-size: 24px;
    }

    .cart-item-box {
        display: flex;
        align-items: center;
        justify-content: space-between;
        /* align-items: flex-start; */
        background: #fff;
        padding: 12px 16px;
        margin: 12px 0;
        border-radius: 12px;
        box-shadow: 0 1px 4px rgba(0, 0, 0, 0.04);
        /* gap: 16px; */
    }

    .item-left {
        display: flex;
        align-items: center;
        gap: 18px;
        flex: 1;
        /* display: flex;
            gap: 180px;
            flex: 1; */
    }

    .item-right {
        display: flex;
        justify-content: flex-end;
        align-items: center;
        text-align: right;
        width: 100%;
    }

    .price-details {
        display: flex;
        flex-direction: column;
        gap: 2px;
        font-size: 15px;
        font-weight: 500;
        color: #333;
    }

    .qty-price,
    .total {
        display: block;
        white-space: nowrap;
    }

    .item-price {
        flex: 0 0 auto;
        text-align: right;
        font-size: 15px;
        font-weight: 500;
        color: #333;
        white-space: nowrap;
    }

    .cart-image {
        width: 60px;
        height: 60px;
        object-fit: cover;
        border-radius: 8px;
    }

    .item-title {
        flex: 1;
        padding: 0 12px;
    }

    .item-info {
        flex: 1;
        display: flex;
        align-items: center; /* ✅ This aligns the name vertically center */
        height: 100%;
        /* gap:10px; */
    }

    .item-center {
        display: flex;
        align-items: center;
        height: 100%;
    }


    .product-title {
        font-size: 16px;
        font-weight: 600;
        color: #222;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }


    .product-quantity {
        font-size: 12px;
        color: #777;
    }

    .price-box {
        display: flex;
        flex-direction: column;
        align-items: flex-end;
        gap: 6px;
    }

    .price-qty-wrapper {
        display: flex;
        align-items: center;
        border: 1px solid #ccc;
        border-radius: 20px;
        padding: 4px 10px;
        background-color: #f8f9fa;
        gap: 10px;
    }

    .qty-btn {
        background-color: #ffffff;
        border: none;
        color: #007bff;
        font-size: 18px;
        font-weight: bold;
        width: 28px;
        height: 28px;
        border-radius: 50%;
        display: flex;
        justify-content: center;
        align-items: center;
        box-shadow: 0 1px 3px rgba(0,0,0,0.1);
        transition: background 0.2s ease;
        cursor: pointer;
    }

        .qty-btn:hover {
            background-color: #e6f0ff;
        }

    .qty-count {
        font-size: 14px;
        font-weight: 600;
        min-width: 20px;
        text-align: center;
    }

    .price-final {
        font-weight: 600;
        color: #28a745;
        font-size: 14px;
    }

    .checkout-footer {
        position: sticky;
        bottom: 0;
        background: #fff;
        padding: 16px;
        box-shadow: 0 -2px 6px rgba(0,0,0,0.05);
        z-index: 10;
    }

    .subtotal-box {
        background: #f1f1f1;
        padding: 16px;
        border-radius: 12px;
        text-align: center;
        margin-bottom: 16px;
    }

        .subtotal-box strong {
            font-size: 16px;
        }

    .savings {
        color: #0b8e2d;
        font-weight: 600;
        margin-top: 4px;
        font-size: 14px;
    }

    .btn-checkout {
        width: 100%;
        background: linear-gradient(135deg, #007bff, #00c6ff);
        color: white;
        padding: 14px;
        font-size: 16px;
        border: none;
        border-radius: 8px;
        font-weight: 600;
        transition: all 0.3s ease;
        box-shadow: 0 4px 10px rgba(0, 123, 255, 0.25);
        cursor: pointer;
    }

        .btn-checkout:hover {
            background: linear-gradient(135deg, #28a745, #20e195);
            box-shadow: 0 4px 14px rgba(40, 167, 69, 0.3);
        }

    .empty-cart-container {
        background-color: #f8f9fc;
        border-radius: 16px;
        padding: 40px 20px;
        text-align: center;
        max-width: 400px;
        margin: 60px auto;
        box-shadow: 0 2px 10px rgba(0,0,0,0.05);
    }

    .empty-cart-icon {
        width: 80px;
        margin-bottom: 20px;
        opacity: 0.5;
    }

    .empty-text {
        font-weight: 600;
        font-size: 16px;
        margin-bottom: 20px;
        color: #333;
    }

    .btn-browse {
        background-color: #212529;
        color: white;
        font-weight: 600;
        padding: 12px 20px;
        border-radius: 8px;
        border: none;
        cursor: pointer;
        transition: background 0.3s ease;
    }

        .btn-browse:hover {
            background-color: #343a40;
        }

    .payment-option {
        margin: 10px 0;
        display: flex;
        align-items: center;
        gap: 10px;
    }

        .payment-option label {
            display: flex;
            align-items: center;
            gap: 10px;
            font-weight: 500;
        }

    .payment-icon {
        width: 30px;
        height: auto;
    }

    .price-summary .price-row {
        display: flex;
        justify-content: space-between;
        padding: 6px 0;
        font-size: 14px;
    }

    .price-summary .total {
        border-top: 1px solid #ccc;
        margin-top: 10px;
        padding-top: 10px;
        font-weight: bold;
    }

    .price-summary .price-row {
        display: flex;
        justify-content: space-between;
        margin: 8px 0;
        align-items: center;
    }

        .price-summary .price-row.total {
            border-top: 1px solid #ccc;
            padding-top: 10px;
            margin-top: 12px;
        }

    .place-order-btn {
        width: 100%;
        background: linear-gradient(135deg, #007bff, #00c6ff); /* Blue */
        border: none;
        padding: 14px;
        font-size: 16px;
        font-weight: 600;
        color: white;
        border-radius: 0 0 18px 18px;
        cursor: pointer;
        transition: all 0.3s ease;
        box-shadow: 0 4px 10px rgba(0, 123, 255, 0.25);
    }

        .place-order-btn:hover {
            background: linear-gradient(135deg, #28a745, #20e195); /* Green on hover */
            box-shadow: 0 4px 14px rgba(40, 167, 69, 0.3);
        }

    .place-order-btn {
        font-size: 15px;
        padding: 12px;
        border-radius: 0 0 14px 14px;
    }

    .price-summary .icon {
        margin-right: 8px;
        color: #00c6ff; /* Blinkit green shade */
    }


    @@media (max-width: 768px) {
        .cart-item-box {
            /* flex-direction: column; */
            align-items: flex-start;
        }

        .item-left {
            display: flex;
            gap: 50px;
            flex: 1;
        }

        .price-box {
            width: 100%;
            align-items: flex-start;
        }

        .place-order-btn {
            font-size: 14px;
            padding: 10px;
        }
    }
</style>

<div class="cart-wrapper">

    <!-- Cart Header -->
    <div class="cart-header">
        <span class="cart-icon">🛍</span>
        Checkout
    </div>

    <!-- Delivery Address -->
    <section class="address-section" style="padding: 20px;">
        <h4>Delivery Address</h4>
        <select class="form-select">
            <option selected>Select address</option>
            <option>Home - 123 Street, City</option>
            <option>Work - Office Complex</option>
        </select>
    </section>

    <!-- Cart Items -->
    <section class="items-section">
        <h4 style="padding-left: 20px;">Cart Items</h4>

        @if (cartItems.Any())
        {
            @foreach (var item in cartItems)
            {
                <div class="cart-item-box">
                    <!-- Left: Image and  -->
                    <div class="item-left">
                        @if (item.ProductImage != null)
                        {
                            <img src="images/No-images.jpg" alt="@item.ProductName" class="cart-image" />
                        }
                        else
                        {
                            <img src="~/images/No-images.jpg" alt="No image" class="cart-image" />
                        }

                        <!-- Column 2: Product Title -->
                        <div class="item-title item-center">
                            <div class="product-title">@item.ProductName</div>
                        </div>


                        <!-- Column 3: Price -->
                        <div class="item-price">
                            <span>@item.Quantity x ₹@item.Price</span><br />
                            <span>= ₹@(item.Quantity * item.Price)</span>
                        </div>
                    </div>


                </div>

            }
        }
        else
        {
            <p>Your cart is empty. <a href="/cart">Go back to cart</a></p>
        }
    </section>

    @if (cartItems.Any())
    {
        <!-- Price Summary -->
        <section class="price-summary" style="padding: 0 20px;">
            <h4>💰	Price Details</h4>

            <div class="price-row">
                <span><i class="fas fa-calculator icon"></i> Subtotal</span>
                <span>₹@Subtotal</span>
            </div>
            <div class="price-row">
                <span><i class="fas fa-motorcycle icon"></i> Delivery Charges</span>
                <span>₹@DeliveryCharges</span>
            </div>
            <div class="price-row">
                <span><i class="fas fa-box icon"></i> Handling Charges</span>
                <span>₹@HandlingCharges</span>
            </div>
            <div class="price-row">
                <span><i class="fas fa-wallet icon"></i> Small Cart Fee</span>
                <span>₹@SmallCartFee</span>
            </div>

            <div class="price-row total">
                <div>
                    <strong><i class="fas fa-receipt icon"></i> Total</strong><br />
                    <small>(incl. all taxes and charges)</small>
                </div>
                <strong>₹@Total</strong>
            </div>
        </section>
        <!-- Payment Method -->
        <section class="payment-method" style="padding: 20px;">
            <h4>Payment Method</h4>
            <div class="custom-payment-options">
                <div class="payment-option">
                    <input type="radio" id="cod" name="payment" checked />
                    <label for="cod">
                        <img src="images/rupee-note-img.png" alt="COD" class="payment-icon" />
                        Cash on Delivery (COD)
                    </label>
                </div>
                <div class="payment-option">
                    <input type="radio" id="upi" name="payment" />
                    <label for="upi">
                        <img src="images/UPI-img.png" alt="UPI" class="payment-icon" />
                        UPI
                    </label>
                </div>
                <div class="payment-option">
                    <input type="radio" id="card" name="payment" />
                    <label for="card">
                        <img src="images/debit-card-img.png" alt="Card" class="payment-icon" />
                        Credit/Debit Card
                    </label>
                </div>
            </div>
        </section>

        <button class="place-order-btn" @onclick="PlaceOrderAsync" disabled="@isSubmitting">
            @(isSubmitting ? "Placing Order..." : "Place Order")
        </button>

    }
</div>

@code {
    private List<CartModel> cartItems = new();
    private string SelectedAddress = "";
    private string SelectedPaymentMethod = "COD";

    private bool isSubmitting = false;
    private bool isSuccess = false;
    private string? errorMessage;

    protected override void OnInitialized()
    {
        if (!CartState.CartItems.Any())
        {
            Navigation.NavigateTo("/cart");
        }

        cartItems = CartState.CartItems.Select(c => new CartModel
            {
                ProductId = c.ProductId,
                ProductName = c.ProductName,
                Variant = c.Variant,
                Quantity = c.Quantity,
                Price = c.Price,
                ProductImage = c.ProductImage
            }).ToList();
    }

    decimal Subtotal => cartItems.Sum(i => i.Price * i.Quantity);
    decimal DeliveryCharges => 20;
    decimal HandlingCharges => 10;
    decimal GstCharges => Subtotal * 0.05m;
    decimal SmallCartFee => Subtotal < 100 ? 5 : 0;
    decimal Total => Subtotal + DeliveryCharges + HandlingCharges + GstCharges + SmallCartFee;
    private async Task PlaceOrderAsync()
    {
        // if (string.IsNullOrWhiteSpace(SelectedAddress))
        // {
        //     errorMessage = "Please select a delivery address.";
        //     return;
        // }

        isSubmitting = true;
        errorMessage = null;
        isSuccess = false;


        var orderRequest = new OrderRequestModel
            {

                UserId = CartState.UserId,
                StoreId = CartState.StoreId,
                OrderStatus = "Pending",
                TotalAmount = Total,
                RainCharges = 5,
                DeliveryCharges = DeliveryCharges,
                OrderItems = cartItems.Select(c => new OrderItemModel
                {

                    ProductId = c.ProductId,
                    Quantity = c.Quantity,
                    Price = c.Price
                }).ToList()
            };

        try
        {
            var order = await OrderService.CreateAsync<OrderRequestModel, PlaceOrderResponseModel>(orderRequest);
            if (order.Success)
            {
                // CartState.ClearCart();
                isSuccess = true;
                Navigation.NavigateTo("/MyOrders");

            }
            else
            {
                errorMessage = order.Message ?? "Failed to place order.";
            }


        }
        catch (Exception ex)
        {
            errorMessage = "Order failed: " + ex.Message;
            Console.WriteLine(errorMessage);
        }
        finally
        {
            isSubmitting = false;
        }
    }
}


