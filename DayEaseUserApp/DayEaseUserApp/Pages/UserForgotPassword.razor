@page "/forgotpassword"
@inject NavigationManager NavigationManager
@inject ILocalStorageService LocalStorage
@inject IRegistration RegistrationService

@using System.ComponentModel.DataAnnotations
@using Domain.DomainModels
@using Domain.RequestModels
@using Blazored.LocalStorage
@using DayEaseServices.Services.IServices
@using System.Text.Json

<style>
    body, html {
        margin: 0;
        padding: 0;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        background-color: #008CFF;
        background-image: url('/images/login-bg.png');
        background-repeat: repeat;
        background-size: contain;
        height: 100%;
        width: 100%;
    }

    .main-container-no-card {
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        min-height: 100vh;
        padding: 2rem;
    }

    .logo {
        width: 120px;
        margin-bottom: 1rem;
    }

    h5 {
        color: white;
        font-size: 1.5rem;
        margin-bottom: 2rem;
    }

    .form-group {
        margin-bottom: 1.5rem;
        width: 100%;
        max-width: 400px;
    }

    .form-group label {
        font-weight: 600;
        margin-bottom: 0.5rem;
        display: block;
        color: white;
    }

    .form-control {
        width: 100%;
        padding: 0.75rem 1rem;
        font-size: 1rem;
        border-radius: 8px;
        border: none;
        outline: none;
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.2);
    }

    .form-control:focus {
        box-shadow: 0 0 5px rgba(255, 255, 255, 0.6);
    }

    .btn-primary {
        width: 100%;
        max-width: 400px;
        padding: 0.75rem;
        font-size: 1rem;
        border: none;
        border-radius: 8px;
        background-color: #00C2FF;
        color: white;
        font-weight: bold;
        cursor: pointer;
        transition: background-color 0.3s ease;
    }

    .btn-primary:hover {
        background-color: #009EDB;
    }

    .validation-error {
        color: #ff0000;
        font-size: 0.9rem;
        margin-top: 0.25rem;
    }

    .error-message {
        color: #ff0000;
        font-size: 1rem;
        font-weight: bold;
        margin-bottom: 1rem;
        text-align: center;
    }

    .password-wrapper {
        position: relative;
    }

    .password-input {
        padding-right: 45px; /* Make room for the toggle icon */
    }

    .password-toggle {
        position: absolute;
        top: 50%;
        right: 10px;
        transform: translateY(-50%);
        cursor: pointer;
        font-size: 1.2rem;
        z-index: 2;
        background-color: rgba(255, 255, 255, 0.8); /* Soft white background */
        padding: 6px;
        border-radius: 50%;
        transition: background-color 0.2s, color 0.2s;
        display: flex;
        align-items: center;
        justify-content: center;
        width: 30px;
        height: 30px;
    }

        /* Black icon when showing password */
        .password-toggle.show {
            color: #000000;
        }

        /* Dark gray icon when hiding password */
        .password-toggle.hide {
            color: #555555;
        }

        /* Add hover effect */
        .password-toggle:hover {
            background-color: rgba(255, 255, 255, 1); /* Brighter background on hover */
            box-shadow: 0 0 5px rgba(0, 0, 0, 0.2);
        }

    .validation-error {
        color: #ffcccc;
        font-size: 0.9rem;
        margin-top: 0.25rem;
    }

    /* Responsive adjustments */
    @@media screen and (max-width: 480px) {
        .form-group, .btn-primary {
            max-width: 90%;
        }
    }
    /* Modal Styles */
    .modal-backdrop {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0,0,0,0.6);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 9999;
    }

    .modal-box {
        background: white;
        color: black;
        padding: 1.5rem 2rem;
        border-radius: 10px;
        width: 300px;
        text-align: center;
        box-shadow: 0 4px 15px rgba(0,0,0,0.3);
    }

        .modal-box p {
            margin-bottom: 1rem;
            font-weight: 600;
            color: black;
        }

    .btn-primary-modal {
        background-color: #00c2ff;
        color: white;
        border: none;
        padding: 10px 20px;
        margin-right: 10px;
        border-radius: 6px;
        cursor: pointer;
    }

        .btn-primary-modal:hover {
            background-color: #009edb;
        }

    .btn-secondary-modal {
        background-color: #ccc;
        color: black;
        border: none;
        padding: 10px 20px;
        border-radius: 6px;
        cursor: pointer;
    }

        .btn-secondary-modal:hover {
            background-color: #aaa;
        }
</style>

<EditForm Model="@forgotPasswordModel" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />

    <div class="main-container-no-card">
        <img src="images/login-logo_v01.png" alt="Day Ease Logo" class="logo" />
        <h5>Forgot Password</h5>

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="error-message">@errorMessage</div>
        }

        <div class="form-group" style="display: none;">
            <label>Phone Number</label>
            <InputText class="form-control" @bind-Value="forgotPasswordModel.PhoneNumber" />
            <ValidationMessage For="@(() => forgotPasswordModel.PhoneNumber)" class="validation-error" />
        </div>

        <div class="form-group">
            <label>New Password:</label>
            <div class="password-wrapper">
                <InputText @bind-Value="forgotPasswordModel.NewPassword"
                           type="@PasswordInputType"
                           class="form-control password-input"
                           maxlength="15"
                           @oninput="OnPasswordInput"
                           @onfocus="OnPasswordFocus"
                           @onblur="OnPasswordBlur" />

                <span class="password-toggle @(ShowPassword ? "show" : "hide")" @onclick="TogglePasswordVisibility">
                    <i class="@((ShowPassword ? "fas fa-eye-slash" : "fas fa-eye"))"></i>
                </span>
            </div>

            <ValidationMessage For="@(() => forgotPasswordModel.NewPassword)" class="validation-message" />

            @if (ShowPasswordErrorOnBlur && !IsPasswordValid)
            {
                <div class="validation-error">Please enter a valid password.</div>
            }

            @if (ShowPasswordRules && !IsPasswordValid)
            {
                <div class="password-rules mt-2">
                    <ul style="color: white; padding: 10px; border-radius: 8px;">
                        <li>Password must be 8–15 characters</li>
                        <li>Contain at least one lowercase letter</li>
                        <li>Contain at least one uppercase letter</li>
                        <li>Contain at least one number</li>
                        <li>Contain at least one special symbol</li>
                    </ul>
                </div>
            }
        </div>

        <button class="btn-primary" type="submit">Reset Password</button>
    </div>
</EditForm>

@if (ShowUserExistsModal)
{
    <div class="modal-backdrop">
        <div class="modal-box">
            <p>Password changed successfully! Please log in to proceed.</p>
            <button class="btn-primary-modal" @onclick="NavigateToLogin">Login</button>
            <button class="btn-secondary-modal" @onclick="CloseModal">Cancel</button>
        </div>
    </div>
}

@code {
    private bool ShowUserExistsModal = false;
    private ForgotPasswordModel forgotPasswordModel = new ForgotPasswordModel();
    private string errorMessage;
    private bool ShowPassword = false;
    private bool IsPasswordValid = false;
    private bool ShowPasswordRules = false;
    private bool ShowPasswordErrorOnBlur = false;

    private string PasswordInputType => ShowPassword ? "text" : "password";

    protected override async Task OnInitializedAsync()
    {
        forgotPasswordModel.PhoneNumber = await LocalStorage.GetItemAsync<string>("PhoneNumber");

        if (string.IsNullOrEmpty(forgotPasswordModel.PhoneNumber))
        {
            NavigationManager.NavigateTo("/otp-verification");
        }
    }

    private async Task HandleValidSubmit()
    {
        errorMessage = string.Empty;

        try
        {
            var json = await RegistrationService.ForgotPassword<ForgotPasswordModel, UserOtpResponseModel>(forgotPasswordModel);

            var result = JsonSerializer.Deserialize<UserOtpResponseModel>(json, new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                });

            if (result.Success && result.StatusCode == 200)
            {
                await LocalStorage.RemoveItemAsync("OTP");
                await LocalStorage.RemoveItemAsync("PhoneNumber");
                ShowUserExistsModal = true;
            }
            else
            {
                errorMessage = result?.Message ?? "Reset password failed.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
    }

    private void OnPasswordInput(ChangeEventArgs e)
    {
        var password = e.Value?.ToString() ?? "";
        forgotPasswordModel.NewPassword = password;
        IsPasswordValid = IsValidPassword(password);
        ShowPasswordErrorOnBlur = false; // Clear error on input
    }

    private void OnPasswordFocus(FocusEventArgs e)
    {
        ShowPasswordRules = true;
    }

    private void OnPasswordBlur(FocusEventArgs e)
    {
        ShowPasswordRules = false;
        ShowPasswordErrorOnBlur = !IsValidPassword(forgotPasswordModel.NewPassword);
    }

    private void TogglePasswordVisibility()
    {
        ShowPassword = !ShowPassword;
    }

    private void NavigateToLogin()
    {
        ShowUserExistsModal = false;
        NavigationManager.NavigateTo("/login");
    }

    private void CloseModal()
    {
        ShowUserExistsModal = false;
    }

    private bool IsValidPassword(string password)
    {
        return !string.IsNullOrWhiteSpace(password) &&
               password.Length >= 8 &&
               password.Length <= 15 &&
               password.Any(char.IsLower) &&
               password.Any(char.IsUpper) &&
               password.Any(char.IsDigit) &&
               password.Any(ch => "!@#$%^&*()_+-=[]{}|;:,.<>?".Contains(ch));
    }
}
