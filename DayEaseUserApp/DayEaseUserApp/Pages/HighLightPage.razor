@page "/highlightcompact"
@inject IJSRuntime JS
@inject IStoreService StoreService
@inject UserLocationState UserLocation
@using Domain.DomainModels
@using Domain.RequestModels
@using DayEaseServices.Services.IServices
@layout NavMenu

<style>
    body {
        background-color: ghostwhite;
    }

    .loading-wrapper {
        display: flex;
        justify-content: center;
        align-items: center;
        min-height: 300px;
    }

    .loading-spinner {
        position: relative;
        width: 80px;
        height: 80px;
    }

    .spinner-border {
        position: absolute;
        width: 80px;
        height: 80px;
        border: 6px solid #f3f3f3;
        border-top: 6px solid #007bff;
        border-radius: 50%;
        animation: spin 1s linear infinite;
    }

    @@keyframes spin {
        0% {
            transform: rotate(0deg);
        }

        100% {
            transform: rotate(360deg);
        }
    }

    .spinner-image {
        position: absolute;
        top: 50%;
        left: 50%;
        width: 40px;
        height: 40px;
        transform: translate(-50%, -50%);
        z-index: 1;
    }

    .store-offers-heading {
        font-weight: 600;
        background-color: #fff0f0;
        color: dodgerblue;
        text-align: center;
        padding: 1rem;
        border-radius: 8px;
        display: flex;
        align-items: center;
        justify-content: flex-start;
        gap: 0.75rem;
        font-size: 1.3rem;
        flex-wrap: wrap;
    }

    @@media (max-width: 500px) {
        .store-offers-heading {
            font-size: 1rem;
            padding: 0.75rem;
            justify-content: center; /* center align on small screens */
        }
    }


    .store-offers-heading img {
        width: 60px;
        height: auto;
    }

    .store-grid {
        display: flex;
        flex-wrap: wrap;
        padding: 10px;
        gap: 0.8rem;
        justify-content: center;
    }

    .store-card-wrapper {
        flex: 1 1 33.33%;
        max-width: 33.33%;
        box-sizing: border-box;
        font-size: 0.72rem;
    }

    @@media (max-width: 768px) {
        .store-card-wrapper {
            flex: 1 1 50%;
            max-width: 50%;
        }
    }

    @@media (max-width: 500px) {
        .store-card-wrapper {
            flex: 1 1 33.33%;
            max-width: 33.33%;
        }
    }

    .custom-card {
        border: 1px solid #ddd;
        border-radius: 16px;
        overflow: hidden;
        background: white;
        box-shadow: 0 2px 8px rgba(0,0,0,0.05);
        display: flex;
        flex-direction: column;
        justify-content: space-between;
        height: 100%;
    }

    .card-img-custom {
        width: 100%;
        object-fit: cover;
        border-bottom: 1px solid #eee;
    }

    .card-img-customs {
        width: 100%;
        object-fit: cover;
    }

    .offer-badge {
        position: absolute;
        top: 5px;
        right: 0.5px;
        background-color: #5a4fff;
        color: white;
        font-size: 0.75rem;
        padding: 2px 1px;
        border-radius: 10px;
        font-weight: 600;
    }

    .store-info {
        padding: 10px;
    }

    .store-name {
        font-weight: 500;
        margin-bottom: 5px;
    }

    .rating-stars {
        font-size: 0.85rem;
        color: #ffaa00;
        margin-bottom: 5px;
    }

    .location {
        font-size: 0.8rem;
        color: #555;
    }

    .btn-shop {
        margin: 10px;
        background-color: #006aff;
        color: white;
        padding: 6px 12px;
        border: none;
        border-radius: 8px;
        text-align: center;
        text-decoration: none;
        font-weight: 500;
    }

    .card {
        background-color: #ffffff;
        border: 1px solid #ffe0e0;
        border-radius: 10px;
        padding: 0.5rem;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05);
    }

    .card-title {
        font-size: 0.8rem;
        font-weight: 600;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }

    .special-offer {
        color: dodgerblue;
        background-color: #ffe6e9;
        padding: 0.2rem 0.4rem;
        font-size: 0.7rem;
        border-radius: 4px;
        margin: 0.3rem 0;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }

    .text-muted {
        font-size: 0.68rem;
        display: flex;
        align-items: center;
        gap: 0.2rem;
        margin-bottom: 0.3rem;
    }

    .store-link {
        text-decoration: none;
        color: inherit;
        display: block;
    }

        .store-link:hover .custom-card {
            box-shadow: 0 4px 12px rgba(0,0,0,0.1);
            transform: scale(1.01);
            transition: all 0.2s ease;
        }

    .badge {
        font-size: 0.65rem;
        padding: 2px 5px;
        border-radius: 4px;
    }

    .btn-outline-primary {
        font-size: 0.65rem;
        padding: 0.3rem 0.5rem;
        width: 100%;
    }

</style>
@if (isLoading)
{
    <div class="loading-wrapper">
        <div class="loading-spinner">
            <div class="spinner-border"></div>
            <img src="images/login-logo_v01.png" alt="Loading" class="spinner-image" />
        </div>
    </div>
}
else if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div class="alert alert-warning text-center mt-3" role="alert">
        @ErrorMessage
    </div>
}
else
{
    @if (Stores.Take(VisibleStoreCount).Any())
    {
        <div class="container mt-3">
            <h2 class="store-offers-heading">
                <span><i class="bi bi-shop me-2"></i>Recent Orders</span>
            </h2>

            <div class="store-grid">
                @foreach (var store in Stores.Take(VisibleStoreCount))
                {
                    <div class="store-card-wrapper">
                        <a href="/productcategory?storeId=@store.StoreId&storeName=@Uri.EscapeDataString(store.StoreName)&DistanceInKm=@store.DistanceInKm" class="store-link">

                            <div class="custom-card">
                                <div class="position-relative">
                                    <img src="images/@store.Products.First().ProductImg" class="card-img-customs" />
                                    @if (!string.IsNullOrEmpty(store.SpecialOffer))
                                    {
                                        <div class="offer-badge">Save @store.SpecialOffer</div>
                                    }
                                </div>
                                <div class="store-info">
                                    <div class="store-name">@store.StoreName</div>
                                    <div class="location">📍 @store.DistanceInKm km</div>
                                    <div>20-30 mins</div>
                                </div>
                            </div>
                        </a>
                    </div>
                }
            </div>

            @if (VisibleStoreCount < Stores.Count)
            {
                <div class="text-center mt-3">
                    <button class="btn btn-outline-primary" @onclick="LoadMoreStores">See More</button>
                </div>
            }
        </div>
    }

    @if (Stores.Take(VisibleStoreCount).Any())
    {
        <div class="container mt-3">
            <h2 class="store-offers-heading">
                <span><i class="bi bi-shop me-2"></i>Near by Stores</span>
            </h2>

            <div class="store-grid">
                @foreach (var store in Stores.Take(VisibleStoreCount))
                {
                    <div class="store-card-wrapper">
                        <a href="/productcategory?storeId=@store.StoreId&storeName=@Uri.EscapeDataString(store.StoreName)&DistanceInKm=@store.DistanceInKm" class="store-link">

                            <div class="custom-card">
                                <div class="position-relative">
                                    <img src="images/@store.Products.First().ProductImg" class="card-img-customs" />
                                    @if (!string.IsNullOrEmpty(store.SpecialOffer))
                                    {
                                        <div class="offer-badge">Save @store.SpecialOffer</div>
                                    }
                                </div>
                                <div class="store-info">
                                    <div class="store-name">@store.StoreName</div>
                                    <div class="location">📍 @store.DistanceInKm km</div>
                                    <div>20-30 mins</div>
                                </div>
                            </div>
                        </a>
                    </div>
                }
            </div>

            @if (VisibleStoreCount < Stores.Count)
            {
                <div class="text-center mt-3">
                    <button class="btn btn-outline-primary" @onclick="LoadMoreStores">See More</button>
                </div>
            }
        </div>
    }

}



@code {
    private List<HighLightModel> Stores = new();
    private string ErrorMessage = string.Empty;
    private bool isLoading = true;
    private int VisibleStoreCount = 6;

    protected override async Task OnInitializedAsync()
    {
        await FetchStoresAsync();
    }

    private async Task FetchStoresAsync()
    {
        isLoading = true;
        try
        {
            var request = new NearbyStoresRequest
            {
                AreaId = UserLocation.AreaId,
                Latitude = UserLocation.Latitude,
                Longitude = UserLocation.Longitude
            };

            var apiResponse = await StoreService.GetNearbyStoresAsync(request);

            if (apiResponse?.Success == true && apiResponse.Stores?.Any() == true)
            {
                Stores = apiResponse.Stores.Select(s => new HighLightModel
                {
                    StoreId = s.StoreId,
                    StoreName = s.StoreName,
                    DistanceInKm = Math.Round(s.Distance, 3),
                    Products = s.Products,
                    SpecialOffer = $"{s.Products.Max(p => p.Discount)} off!"
                }).ToList();
            }
            else
            {
                ErrorMessage = apiResponse?.Message ?? "No stores found.";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error fetching stores: {ex.Message}";
        }

        isLoading = false;
    }

    private void LoadMoreStores()
    {
        VisibleStoreCount += 6;
    }
}