@* <h3>UserForgotPassword</h3> *@
@page "/forgotpassword"
@inject NavigationManager NavigationManager
@using System.ComponentModel.DataAnnotations
@using Domain.RequestModels
@using Blazored.LocalStorage
@inject ILocalStorageService LocalStorage
<style>
    .main-container {
        display: flex;
        justify-content: center;
        align-items: center;
        min-height: 100vh; /* full viewport height for vertical centering */
        padding: 2rem;
        background-color: #F0F0F0; /* optional background */
    }

    .card {
        background-color: #008CFF;
        background-image: url('/images/login-bg.png');
        background-size: 110%;
        background-repeat: no-repeat;
        background-position: center;
        border-radius: 25px;
        padding: 2rem;
        width: 550px;
        text-align: center;
        box-shadow: 0 0 25px 5px rgba(255, 0, 0, 0.7);
        position: relative;
        overflow: hidden;
        transition: transform 0.3s ease;
    }

        .card:hover {
            transform: scale(1.01);
        }

    .form-group {
        margin-bottom: 1rem;
        text-align: left;
    }

        .form-group label {
            font-weight: 600;
            color: #F0F0F0;
            display: block;
            margin-bottom: 0.5rem;
        }

    .form-control {
        width: 100%;
        padding: 12px;
        font-size: 1rem;
        border-radius: 8px;
        border: none;
        outline: none;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    }

        .form-control.error {
            border: 2px solid red;
        }

    .btn-primary {
        width: 100%;
        padding: 14px;
        font-size: 1rem;
        border: none;
        border-radius: 8px;
        background-color: #00C2FF;
        color: white;
        font-weight: bold;
        cursor: pointer;
        transition: background-color 0.3s ease;
    }

        .btn-primary:hover {
            background-color: #009EDB;
        }

    .validation-error {
        color: #FFCCCC;
        font-weight: 500;
        font-size: 0.95rem;
        margin-top: 0.5rem;
    }
</style>
<EditForm Model="@forgotPasswordModel" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="main-container">
        <div class="card">
            <h3 class="mb-4 text-center text-white-custom">Forgot Password</h3>
            <div class="form-group" style="display:none">
                <label>Phone Number</label>
                <InputText class="form-control" @bind-Value="forgotPasswordModel.PhoneNumber" />
                <ValidationMessage For="@(() => forgotPasswordModel.PhoneNumber)" class="validation-error" />
            </div>
            <div class="form-group" style="display:none">
                <label>OTP</label>
                <InputText class="form-control" @bind-Value="forgotPasswordModel.OTP" />
                <ValidationMessage For="@(() => forgotPasswordModel.OTP)" class="validation-error" />
            </div>
            <div class="form-group">
                <label>New Password</label>
                <InputText type="password" class="form-control" @bind-Value="forgotPasswordModel.NewPassword" />
                <ValidationMessage For="@(() => forgotPasswordModel.NewPassword)" class="validation-error" />
            </div>
            <div class="form-group">
                <label>Confirm Password</label>
                <InputText type="password" class="form-control" @bind-Value="forgotPasswordModel.ConfirmPassword" />
                <ValidationMessage For="@(() => forgotPasswordModel.ConfirmPassword)" class="validation-error" />
            </div>
            <button class="btn btn-primary" type="submit">Reset Password</button>
        </div>
    </div>
</EditForm>

@code {
    private ForgotPasswordModel forgotPasswordModel = new ForgotPasswordModel();

    protected override async Task OnInitializedAsync()
    {
        forgotPasswordModel.PhoneNumber = await LocalStorage.GetItemAsync<string>("PhoneNumber");
        forgotPasswordModel.OTP = await LocalStorage.GetItemAsync<string>("OTP");

        if (string.IsNullOrEmpty(forgotPasswordModel.PhoneNumber) || string.IsNullOrEmpty(forgotPasswordModel.OTP))
        {
            NavigationManager.NavigateTo("/mobile-number");
        }
    }

    private async Task HandleValidSubmit()
    {
        if (forgotPasswordModel.NewPassword != forgotPasswordModel.ConfirmPassword)
        {
            return;
        }

        // TODO: call ResetPassword API here
        // await ForgotPasswordService.ResetPasswordAsync(forgotPasswordModel);

        await LocalStorage.RemoveItemAsync("OTP");
        await LocalStorage.RemoveItemAsync("PhoneNumber");

        NavigationManager.NavigateTo("/login");
    }
}