@page "/user-details"
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Forms
@using DayEaseServices.Services.IServices
@using Domain.RequestModels
@using Blazored.LocalStorage
@inject IRegistration RegistrationService
@inject ILocalStorageService LocalStorage
@inject NavigationManager Navigation

<style>
    .main-container {
        display: flex;
        justify-content: center;
        align-items: center;
        min-height: 30vh;
        background-size: cover;
        padding: 2rem;
    }

    .card {
        background-color: #008CFF;
        background-image: url('images/login-bg.png');
        background-size: 110%;
        background-repeat: no-repeat;
        background-position: center;
        border-radius: 25px;
        padding: 2rem;
        width: 550px;
        text-align: center;
        box-shadow: 0 0 25px 5px rgba(255, 0, 0, 0.7);
        position: relative;
        overflow: hidden;
    }


        .card:hover {
            transform: scale(1.01);
        }

        .card .logo {
            width: 150px;
            margin: 0 auto 1.5rem auto;
            display: block;
        }

    .inner-box {
        background-color: transparent;
        padding: 2rem 1rem 0;
        text-align: left;
    }

        .inner-box h3 {
            text-align: center;
            color: #fff;
            margin-bottom: 1.5rem;
        }

    .form-group {
        margin-bottom: 1rem;
    }

        .form-group label {
            font-weight: 600;
            color: #f0f0f0;
            display: block;
            margin-bottom: 0.5rem;
        }

    .form-control {
        width: 100%;
        padding: 12px;
        font-size: 1rem;
        border-radius: 8px;
        border: none;
        outline: none;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    }

        .form-control.error {
            border: 2px solid red;
        }

    .btn-primary {
        width: 100%;
        padding: 14px;
        font-size: 1rem;
        border: none;
        border-radius: 8px;
        background-color: #00c2ff;
        color: white;
        font-weight: bold;
        cursor: pointer;
        transition: background-color 0.3s ease;
    }

        .btn-primary:hover {
            background-color: #009edb;
        }

    .validation-error {
        color: #ffcccc;
        font-weight: 500;
        font-size: 0.95rem;
        margin-top: 0.5rem;
    }

    @@media (max-width: 768px) {
        .card {
            padding: 2rem 1.5rem;
            width: 100%;
        }

        .inner-box {
            padding: 1rem 0.5rem 0;
        }

        .form-control {
            padding: 10px;
            font-size: 0.95rem;
        }

        .btn-primary {
            padding: 12px;
            font-size: 0.95rem;
        }

        .inner-box h3 {
            font-size: 1.25rem;
        }
    }

    .text-white-custom {
        color: white !important;
    }


    @@media (max-width: 480px) {
        .card .logo {
            width: 120px;
        }

        .inner-box h3 {
            font-size: 1.1rem;
        }

        .form-group label {
            font-size: 0.9rem;
        }

        .form-control, .btn-primary {
            font-size: 0.9rem;
        }
    }

    /* Modal Styles */
    .modal-backdrop {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0,0,0,0.6);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 9999;
    }

    .modal-box {
        background: white;
        color: black;
        padding: 1.5rem 2rem;
        border-radius: 10px;
        width: 300px;
        text-align: center;
        box-shadow: 0 4px 15px rgba(0,0,0,0.3);
    }

        .modal-box p {
            margin-bottom: 1rem;
            font-weight: 600;
        }

    .btn-primary-modal {
        background-color: #00c2ff;
        color: white;
        border: none;
        padding: 10px 20px;
        margin-right: 10px;
        border-radius: 6px;
        cursor: pointer;
    }

        .btn-primary-modal:hover {
            background-color: #009edb;
        }

    .btn-secondary-modal {
        background-color: #ccc;
        color: black;
        border: none;
        padding: 10px 20px;
        border-radius: 6px;
        cursor: pointer;
    }

        .btn-secondary-modal:hover {
            background-color: #aaa;
        }
</style>


@* <div class="container-fluid min-vh-100 d-flex justify-content-center align-items-center p-3"
     style="background: url('images/login-bg.png') no-repeat center center; background-size: cover;">
    <div class="card shadow-lg p-4 w-100" style="max-width: 600px;">
        <img src="images/login-logo_v01.png" alt="Day Ease Logo" class="img-fluid mx-auto d-block mb-4" style="max-width: 100px;" />
        <div class="text-center mb-3">
            <h4>Register</h4>
        </div> *@
        <div class="main-container">
        <div class="card">
            <img src="images/login-logo_v01.png" alt="Day Ease Logo" class="logo" />

            <div class="inner-box">
                <h3>Register</h3>

        <EditForm Model="@user" OnValidSubmit="HandleValidSubmit">
            <DataAnnotationsValidator />

            <div class="mb-3">
                <label class="form-label">First Name</label>
                <InputText @bind-Value="user.FName" class="form-control" maxlength="20"
                           oninput="this.value=this.value.replace(/[^A-Za-z\s]/g,'')" />
                <ValidationMessage For="@(() => user.FName)" class="validation-message" />
            </div>

            <div class="mb-3">
                <label class="form-label">Last Name</label>
                <InputText @bind-Value="user.LName" class="form-control" maxlength="20"
                           oninput="this.value=this.value.replace(/[^A-Za-z\s]/g,'')" />
                <ValidationMessage For="@(() => user.LName)" class="validation-message" />
            </div>

                <div class="mb-3">
                    <label class="form-label">Password</label>
                    <div class="input-group">
                        <InputText @bind-Value="user.Password"
                                   type="@PasswordInputType"
                                   class="form-control"
                                   maxlength="15"
                                   @oninput="OnPasswordInput"
                                   @onfocus="() => ShowPasswordRules = true"
                                   @onblur="() => ShowPasswordRules = false" />
                        <button type="button" class="btn btn-outline-secondary" @onclick="TogglePasswordVisibility">
                            @(IsPasswordVisible ? "Hide" : "Show")
                        </button>
                    </div>
                    <ValidationMessage For="@(() => user.Password)" class="validation-message" />
                    @if (ShowPasswordRules && !IsPasswordValid)
                    {
                        <div class="password-rules mt-2">
                            <ul style="color: white; padding: 10px; border-radius: 8px;">
                                <li>Password must be 7–15 characters</li>
                                <li>Contain at least one lowercase letter</li>
                                <li>Contain at least one uppercase letter</li>
                                <li>Contain at least one number</li>
                                <li>Contain at least one special symbol</li>
                            </ul>
                        </div>
                    }
                </div>


            <div class="mb-3">
                <label class="form-label">Country</label>
                <InputText @bind-Value="user.Country" class="form-control" readonly />
                <ValidationMessage For="@(() => user.Country)" class="validation-message" />
            </div>

            <div class="mb-3">
                <label class="form-label">State</label>
                <select class="form-control" @bind="SelectedStateId">
                    <option value="">-- Select State --</option>
                    @foreach (var state in stateList)
                    {
                        <option value="@state.StateId">@state.StateName</option>
                    }
                </select>
                <ValidationMessage For="@(() => user.State)" class="validation-message" />
            </div>

            <div class="mb-3">
                <label class="form-label">City</label>
                <select class="form-control" @bind="SelectedCityId">
                    <option value="">-- Select City --</option>
                    @foreach (var city in cityList)
                    {
                        <option value="@city.CityId">@city.CityName</option>
                    }
                </select>
                <ValidationMessage For="@(() => user.City)" class="validation-message" />
            </div>

            <div class="mb-3">
                <label class="form-label">Area</label>
                <select class="form-control" @bind="SelectedAreaId">
                    <option value="">-- Select Area --</option>
                    @foreach (var area in areaList)
                    {
                        <option value="@area.AreaId">@area.AreaName</option>
                    }
                </select>
                <ValidationMessage For="@(() => user.Location)" class="validation-message" />
            </div>

            <div class="mb-3">
                <label class="form-label">SubArea</label>
                <select class="form-control" @bind="user.Sublocation">
                    <option value="">-- Select SubArea --</option>
                    @foreach (var sub in subareaList)
                    {
                        <option value="@sub.SubAreaId">@sub.SubAreaName</option>
                    }
                </select>
                <ValidationMessage For="@(() => user.Sublocation)" class="validation-message" />
            </div>

            <div class="mb-3">
                <label class="form-label">Gender</label>
                <InputSelect @bind-Value="user.Gender" class="form-control">
                    <option value="">-- Select Gender --</option>
                    <option>Male</option>
                    <option>Female</option>
                    <option>Other</option>
                </InputSelect>
                <ValidationMessage For="@(() => user.Gender)" class="validation-message" />
            </div>

            <div class="mb-3">
                <label class="form-label">Address</label>
                <InputTextArea @bind-Value="user.Address" class="form-control" rows="2" maxlength="25"  />
                <ValidationMessage For="@(() => user.Address)" class="validation-message" />
            </div>

            <div class="mb-3">
                <label class="form-label">Latitude</label>
                <InputText @bind-Value="user.Latitude" class="form-control" />
                <ValidationMessage For="@(() => user.Latitude)" class="validation-message" />
            </div>

            <div class="mb-3">
                <label class="form-label">Longitude</label>
                <InputText @bind-Value="user.Longitude" class="form-control" />
                <ValidationMessage For="@(() => user.Longitude)" class="validation-message" />
            </div>

            <div class="form-check mb-3">
                <InputCheckbox @bind-Value="AcceptedTerms" class="form-check-input" />
                <label class="form-check-label">I accept the terms and conditions</label>
            </div>

            <button type="submit" class="btn btn-primary" disabled="@(!AcceptedTerms)">Register</button>
        </EditForm>
    </div>
    </div>
</div>

@if (ShowUserExistsModal)
{
    <div class="modal-backdrop">
        <div class="modal-box">
            <p>Registered Successfully. Login with username and password.</p>
            <button class="btn-primary-modal" @onclick="NavigateToLogin">Login</button>
            <button class="btn-secondary-modal" @onclick="CloseModal">Cancel</button>
        </div>
    </div>
}

@code {
    private UserModel user = new();
    private List<StateModel> stateList = new();
    private List<CityModel> cityList = new();
    private List<AreaModel> areaList = new();
    private List<SubAreaModel> subareaList = new();
    private bool AcceptedTerms = false;
    private bool Submitted = false;
    private bool ShowUserExistsModal = false;
    private bool ShowPasswordRules = false;
    private bool IsPasswordValid = false;
    private bool IsPasswordVisible = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            stateList = await RegistrationService.GetStatesAsync();
            var phoneFromLocalStorage = await LocalStorage.GetItemAsync<string>("PhoneNumber");

            if (!string.IsNullOrEmpty(phoneFromLocalStorage))
            {
                user.PhoneNumber = phoneFromLocalStorage;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error during initialization: {ex.Message}");
        }
    }

    private string SelectedStateId
    {
        get => user.State;
        set
        {
            if (user.State != value)
            {
                user.State = value;
                user.City = null;
                user.Location = null;
                user.Sublocation = null;
                _ = LoadCitiesAsync();
            }
        }
    }

    private string SelectedCityId
    {
        get => user.City;
        set
        {
            if (user.City != value)
            {
                user.City = value;
                user.Location = null;
                user.Sublocation = null;
                _ = LoadAreasAsync();
            }
        }
    }

    private string SelectedAreaId
    {
        get => user.Location;
        set
        {
            if (user.Location != value)
            {
                user.Location = value;
                user.Sublocation = null;
                _ = LoadSubAreasAsync();
            }
        }
    }

    private async Task LoadCitiesAsync()
    {
        if (!string.IsNullOrWhiteSpace(user.State))
            cityList = await RegistrationService.GetCityAsync(new CityModel { StateId = user.State });
        else
            cityList.Clear();

        areaList.Clear();
        subareaList.Clear();
        await InvokeAsync(StateHasChanged);
    }

    private async Task LoadAreasAsync()
    {
        if (!string.IsNullOrWhiteSpace(user.City))
            areaList = await RegistrationService.GetAreaByCityId(new AreaModel { CityId = user.City });
        else
            areaList.Clear();

        subareaList.Clear();
        await InvokeAsync(StateHasChanged);
    }

    private async Task LoadSubAreasAsync()
    {
        if (!string.IsNullOrWhiteSpace(user.Location))
            subareaList = await RegistrationService.GetSubAreaByAreaId(new SubAreaModel { AreaId = user.Location });
        else
            subareaList.Clear();

        await InvokeAsync(StateHasChanged);
    }

    private async Task HandleValidSubmit()
    {
        var response = await RegistrationService.RegisterUserAsync(user);

        if (response != null)
        {
            Submitted = true;
            await LocalStorage.RemoveItemAsync("PhoneNumber");
            user = new UserModel();
            AcceptedTerms = false;
            stateList = await RegistrationService.GetStatesAsync();
            cityList.Clear();
            areaList.Clear();
            subareaList.Clear();
            ShowUserExistsModal = true;
            await InvokeAsync(StateHasChanged);
        }
        else
        {
            Submitted = false;
        }
    }

    private void CloseModal()
    {
        ShowUserExistsModal = false;
    }

    private void NavigateToLogin()
    {
        Navigation.NavigateTo("/login");
    }

    private string PasswordInputType => IsPasswordVisible ? "text" : "password";

    private void TogglePasswordVisibility()
    {
        IsPasswordVisible = !IsPasswordVisible;
    }

    private void OnPasswordInput(ChangeEventArgs e)
    {
        var password = e.Value?.ToString() ?? "";
        user.Password = password;
        IsPasswordValid = IsValidPassword(password);
    }

    private bool IsValidPassword(string password)
    {
        return !string.IsNullOrWhiteSpace(password) &&
               password.Length >= 7 &&
               password.Length <= 15 &&
               password.Any(char.IsLower) &&
               password.Any(char.IsUpper) &&
               password.Any(char.IsDigit) &&
               password.Any(ch => "!@#$%^&*()_+-=[]{}|;:,.<>?".Contains(ch));
    }
}
