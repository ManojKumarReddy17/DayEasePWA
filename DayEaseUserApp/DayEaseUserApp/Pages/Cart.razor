@page "/cart"
@using DayEaseServices.Services.IServices
@using Domain.RequestModels
@inject ICartService cartService
@layout NavMenu
@inject CartState CartState
@inject NavigationManager Navigation
@inject UserLocationState UserLocation
<style>
    .cart-wrapper {
        background-color: #f8f9fa;
        padding: 20px 0 80px;
        border-radius: 16px;
        max-width: 800px;
        margin: auto;
        box-shadow: 0 2px 12px rgba(0, 0, 0, 0.05);
    }

    .cart-header {
        background: linear-gradient(135deg, #007bff, #00c6ff);
        color: white;
        text-align: center;
        padding: 16px;
        font-size: 20px;
        font-weight: bold;
        border-radius: 16px 16px 0 0;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 10px;
    }

    .cart-icon {
        font-size: 24px;
    }

    .delivery-timer {
        background-color: #e0f8eb;
        color: #0b8e2d;
        border-radius: 20px;
        padding: 10px 16px;
        font-weight: 600;
        display: inline-flex;
        align-items: center;
        gap: 8px;
        margin: 12px;
        font-size: 14px;
    }

    .cart-item-box {
        display: flex;
        justify-content: space-between;
        align-items: flex-start;
        background: #fff;
        padding: 16px;
        margin: 12px;
        border-radius: 12px;
        box-shadow: 0 1px 4px rgba(0, 0, 0, 0.04);
        gap: 16px;
    }

    .item-left {
        display: flex;
        gap: 12px;
        flex: 1;
    }

    .cart-image {
        width: 60px;
        height: 60px;
        object-fit: cover;
        border-radius: 8px;
    }

    .item-info {
        display: flex;
        flex-direction: column;
        justify-content: center;
    }

    .product-title {
        font-weight: 600;
        font-size: 14px;
        margin-bottom: 4px;
    }

    .product-quantity {
        font-size: 12px;
        color: #777;
    }

    .price-box {
        display: flex;
        flex-direction: column;
        align-items: flex-end;
        gap: 6px;
    }

    .price-qty-wrapper {
        display: flex;
        align-items: center;
        border: 1px solid #ccc;
        border-radius: 20px;
        padding: 4px 10px;
        background-color: #f8f9fa;
        gap: 10px;
    }

    .qty-btn {
        background-color: #ffffff;
        border: none;
        color: #007bff;
        font-size: 18px;
        font-weight: bold;
        width: 28px;
        height: 28px;
        border-radius: 50%;
        display: flex;
        justify-content: center;
        align-items: center;
        box-shadow: 0 1px 3px rgba(0,0,0,0.1);
        transition: background 0.2s ease;
        cursor: pointer;
    }

        .qty-btn:hover {
            background-color: #e6f0ff;
        }

    .qty-count {
        font-size: 14px;
        font-weight: 600;
        min-width: 20px;
        text-align: center;
    }

    .price-final {
        font-weight: 600;
        color: #28a745;
        font-size: 14px;
    }

    .original {
        font-size: 12px;
        text-decoration: line-through;
        color: #999;
    }

    .checkout-footer {
        position: sticky;
        bottom: 0;
        background: #fff;
        padding: 16px;
        box-shadow: 0 -2px 6px rgba(0,0,0,0.05);
        z-index: 10;
    }

    .subtotal-box {
        background: #f1f1f1;
        padding: 16px;
        border-radius: 12px;
        text-align: center;
        margin-bottom: 16px;
    }

        .subtotal-box strong {
            font-size: 16px;
        }

    .savings {
        color: #0b8e2d;
        font-weight: 600;
        margin-top: 4px;
        font-size: 14px;
    }

    .btn-checkout {
        width: 100%;
        background: linear-gradient(135deg, #007bff, #00c6ff);
        color: white;
        padding: 14px;
        font-size: 16px;
        border: none;
        border-radius: 8px;
        font-weight: 600;
        transition: all 0.3s ease;
        box-shadow: 0 4px 10px rgba(0, 123, 255, 0.25);
        cursor: pointer;
    }

        .btn-checkout:hover {
            background: linear-gradient(135deg, #28a745, #20e195);
            box-shadow: 0 4px 14px rgba(40, 167, 69, 0.3);
        }

    /* Responsive Fix */
    @@media (max-width: 768px) {
        .cart-item-box {
            flex-direction: row;
            align-items: center;
        }

        .item-left {
            flex: 2;
        }

        .price-box {
            align-items: flex-end;
            flex: 1;
        }

        .price-qty-wrapper {
            justify-content: flex-end;
            width: auto;
        }
    }

    @@media (max-width: 480px) {
        .product-title {
            font-size: 13px;
        }

        .price-qty-wrapper {
            gap: 6px;
            padding: 4px 8px;
        }

        .qty-btn {
            width: 24px;
            height: 24px;
            font-size: 16px;
        }

        .qty-count {
            font-size: 13px;
        }
    }

    /* Empty Cart UI */
    .empty-cart-container {
        background-color: #f8f9fc;
        border-radius: 16px;
        padding: 40px 20px;
        text-align: center;
        max-width: 400px;
        margin: 60px auto;
        box-shadow: 0 2px 10px rgba(0,0,0,0.05);
    }

    .empty-cart-icon {
        width: 80px;
        margin-bottom: 20px;
        opacity: 0.5;
    }

    .empty-text {
        font-weight: 600;
        font-size: 16px;
        margin-bottom: 20px;
        color: #333;
    }

    .btn-browse {
        background-color: #212529;
        color: white;
        font-weight: 600;
        padding: 12px 20px;
        border-radius: 8px;
        border: none;
        cursor: pointer;
        transition: background 0.3s ease;
    }

        .btn-browse:hover {
            background-color: #343a40;
        }
</style>

<div class="cart-wrapper">
    <div class="cart-header">
        <i class="fas fa-shopping-cart cart-icon"></i>
        Your Cart
    </div>

    <div class="delivery-timer">
        ⏱️ Delivery in 15 mins
    </div>

    @if (cartItems.Any())
    {
        @foreach (var item in cartItems)
        {
            <div class="cart-item-box">
                <div class="item-left">
                    <img src="placeholder.jpg" alt="@item.ProductImage" class="cart-image" />
                    <div class="item-info">
                        <div class="product-title">@item.ProductName</div>
                        <div class="product-quantity">Qty: @item.Quantity</div>
                    </div>
                </div>

                <div class="price-box">
                    <div class="price-qty-wrapper">
                        <button class="qty-btn" @onclick="async () => await DecreaseQuantity(item)">−</button>
                        <span class="qty-count">@item.Quantity</span>
                        <button class="qty-btn" @onclick="async () => await IncreaseQuantity(item)">+</button>
                    </div>
                    <div class="price-final">₹@item.TotalPrice</div>
                    <div class="original">₹@(item.Price * item.Quantity)</div>
                </div>
            </div>
        }

        <div class="checkout-footer">
            <div class="subtotal-box">
                <div><strong>Subtotal:</strong> ₹@cartItems.Sum(i => i.TotalPrice)</div>
                <div class="savings">You Save: ₹@cartItems.Sum(i => (i.Price * i.Quantity) - i.TotalPrice)</div>
            </div>
            <button class="btn-checkout" @onclick="Checkout">Proceed to Checkout</button>
        </div>
    }
    else
    {
        <div class="empty-cart-container">
            <img src="images/empty-cart-icon.svg" alt="Empty Cart" class="empty-cart-icon" />
            <p class="empty-text">Your cart is empty</p>
            <button class="btn-browse" @onclick="@(() => Navigation.NavigateTo("/highlightcompact"))">Browse Products</button>
        </div>
    }
</div>

@code {
    private List<CartModel> cartItems = new();

    protected override async Task OnInitializedAsync()
    {
        var userId = UserLocation.UserId;

        var cartRequest = new CartModel { UserId = userId };
        cartItems = await cartService.GetCartItemsByUserId(cartRequest);
        await cartService.LoadCartItemCountAsync(cartRequest);
    }


    private async Task IncreaseQuantity(CartModel item)
    {
        item.Quantity++;
        item.TotalPrice = item.Quantity * (item.Price - item.Discount);

        var response = await cartService.UpdateCartItems(item);
        if (response?.Result != null)
        {
            await cartService.LoadCartItemCountAsync(item);
            StateHasChanged();
        }


    }

    private async Task DecreaseQuantity(CartModel item)
    {
        if (item.Quantity > 0)
        {
            item.Quantity--;
            item.TotalPrice = item.Quantity * (item.Price - item.Discount);

            if (item.Quantity == 0)
            {
                var responses = await cartService.RemoveCartItems(item);
                if (responses?.Result != null)
                {
                    cartItems.Remove(item);
                    await cartService.LoadCartItemCountAsync(item);
                    StateHasChanged();
                }

            }
            else
            {
                var response = await cartService.UpdateCartItems(item);
                if (response?.Result != null)
                {
                    await cartService.LoadCartItemCountAsync(item);
                    StateHasChanged();
                }
            }
        }
        else
        {
            var response = await cartService.RemoveCartItems(item);
            if (response?.Result != null)
            {
                cartItems.Remove(item);
                StateHasChanged();
                await cartService.LoadCartItemCountAsync(item);

            }
        }
    }

    private void Checkout()
    {
        CartState.CartItems = cartItems;
        CartState.UserId = UserLocation.UserId;
        CartState.StoreId = cartItems.FirstOrDefault().StoreId;
        Navigation.NavigateTo("/checkout");
    }
    private void BrowseProducts()
    {
        Navigation.NavigateTo("/productcategory");
    }

}
