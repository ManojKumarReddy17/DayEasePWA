@page "/order"
@inject IOrderService OrderServices
@inject NavigationManager Navigation
@using DayEaseServices.Services.IServices
@using Domain.RequestModels
@using Domain.DomainModels
@using System.Globalization
@using Microsoft.AspNetCore.WebUtilities
@layout NavMenu
<style>
    html, body {
        margin: 0;
        padding: 0;
        height: 100%;
        width: 100%;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        background: linear-gradient(135deg, #f9f9f9, #e1f5fe);
        overflow-x: hidden;
        overflow-y: auto;
    }

    .main-container {
        max-width: 750px;
        margin: 2rem auto;
        background: #ffffff;
        border-radius: 16px;
        box-shadow: 0 10px 25px rgba(0, 0, 0, 0.08);
        padding: 2.5rem;
    }

    h3 {
        text-align: center;
        margin-bottom: 1.5rem;
        color: #1a237e;
        font-size: 1.7rem;
        font-weight: 700;
    }

    .section {
        margin-top: 1.8rem;
        padding: 1rem 0;
        border-top: 1px dashed #ccc;
    }

        .section h4 {
            color: #0288d1;
            margin-bottom: 0.8rem;
            border-bottom: 2px solid #81d4fa;
            padding-bottom: 0.4rem;
            font-size: 1.2rem;
        }

    .row, .rows {
        display: flex;
        padding-right:10px;
        justify-content: space-between;
        align-items: center;
        margin: 6px 0;
        font-size: 1rem;
        color: #37474f;
    }

        .rows span:last-child {
            font-weight: 600;
            color: #263238;
        }

    .status {
        padding: 5px 14px;
        border-radius: 50px;
        font-weight: 600;
        color: #fff;
        text-transform: capitalize;
        font-size: 0.9rem;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
    }

    .delivered {
        background-color: #43a047;
    }

    .out-for-delivery {
        background-color: #ffca28;
        color: #000;
    }

    .cancelled {
        background-color: #e53935;
    }

    .pending {
        background-color: #ffca28;
    }

    .items-table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 10px;
        background-color: #fafafa;
        border-radius: 8px;
        overflow: hidden;
    }

        .items-table th, .items-table td {
            padding: 12px;
            border: 1px solid #e0e0e0;
            text-align: center;
            font-size: 0.95rem;
        }

        .items-table th {
            background-color: #e3f2fd;
            color: #0277bd;
            font-weight: 600;
        }

        .items-table tr:nth-child(even) {
            background-color: #f9f9f9;
        }

    .total-line {
        font-weight: 600;
        text-align: right;
        margin-top: 10px;
        font-size: 1rem;
        color: #37474f;
    }

        .total-line strong {
            color: #1a237e;
        }

    .btn {
        display: inline-block;
        background: linear-gradient(to right, #0288d1, #26c6da);
        color: white;
        padding: 12px 24px;
        margin-top: 1.2rem;
        border-radius: 10px;
        font-size: 1rem;
        font-weight: 600;
        border: none;
        text-align: center;
        cursor: pointer;
        width: 100%;
        box-shadow: 0 4px 10px rgba(2, 136, 209, 0.3);
        transition: background 0.3s ease;
    }

        .btn:hover {
            background: linear-gradient(to right, #039be5, #00acc1);
        }

    .btn-secondary {
        background: linear-gradient(to right, #757575, #9e9e9e);
        box-shadow: 0 4px 10px rgba(158, 158, 158, 0.3);
        margin-top: 0.7rem;
    }

    .loading {
        text-align: center;
        margin-top: 2rem;
        font-size: 1.2rem;
        color: #0288d1;
        font-weight: 600;
    }

    .flex-heading {
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 10px; /* gap between image and text */
    }

    .logo {
        height: 40px; /* adjust based on your layout */
    }

    .order-id-display {
        font-size: 1.2rem;
        font-weight: 600;
        color: #1a237e;
        display: flex;
        gap: 10px;
        align-items: center;
        margin-bottom: 1rem;
    }

        .order-id-display .label {
            color: #1a237e;
        }

        .order-id-display .value {
            color: #263238;
        }

</style>

<div class="main-container">
    @if (isLoading)
    {
        <div class="loading">Loading Order Details...</div>
    }
    else if (OrderDetails != null)
    {
        <h2 class="order-heading flex-heading">
            <img src="images/Day-Ease-logo-black.png" class="logo" alt="Day Ease Logo" />
            Order Details
        </h2>
       
     @*    <p>Order #@OrderDetails.OrderId</p> *@
        <div class="order-id-header">
            <span class="label">Order ID:</span>
            <span class="value">@OrderDetails.OrderId</span>
        </div>

        <div class="section">
            <h4>Order Summary</h4>
            <div class="row">
                <div>
                <span>Order Date:</span><span>@OrderDetails.CreatedAt.ToString("MMM dd, yyyy - h:mm tt", CultureInfo.InvariantCulture)</span></div>
                </div>
            <div class ="rows">
                <div>
                <span>Status:</span>
                <span class="@GetStatusClass(OrderDetails.OrderStatus)">@OrderDetails.OrderStatus</span>
            </div>
            </div>

            <div class="row">
                <div > <span>Store Name:</span><span>@OrderDetails.StoreName</span></div>
                </div>
        </div>

        <div class="section">
            <h4>Items Ordered</h4>
            @if (OrderDetails.OrderItems != null && OrderDetails.OrderItems.Any())
            {
                <table class="items-table">
                    <thead>
                        <tr>
                            <th>Item</th>
                            <th>Qty</th>
                            <th>Price</th>
                            <th>Total</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in OrderDetails.OrderItems)
                        {
                            <tr>
                                 <td>@item.ProductName</td>
                                <td>@item.Quantity</td>
                                <td>₹@item.Price</td>
                                <td>₹@(item.Price * item.Quantity)</td>
                            </tr>
                        }
                    </tbody>
                </table>
                <div class="total-line">Subtotal: ₹@Subtotal</div>
                <div class="total-line">Rain Charges: ₹@OrderDetails.RainCharges</div>
                <div class="total-line">Delivery Fee: ₹@OrderDetails.DeliveryCharges</div>
                <div class="total-line">Total Paid: <strong>₹@OrderDetails.TotalAmount</strong></div>
            }
            else
            {
                <p>No items found in this order.</p>
            }
        </div>

        <div>
            <button class="btn" @onclick="TrackOrder">Track Order</button>
            <button class="btn btn-secondary" @onclick="DownloadInvoice">Download Invoice</button>
        </div>
    }
    else
    {
        <p class="loading">Order not found or an error occurred.</p>
    }
</div>

@code {
    [Parameter] public string OrderId { get; set; }

    private OrderResponseModel OrderDetails { get; set; }
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
            var queryParams = QueryHelpers.ParseQuery(uri.Query);

            if (queryParams.TryGetValue("orderId", out var orderId))
            {
                OrderId = orderId;
            }

            var request = new GetOrderDetailsByIdRequestModel { OrderId = OrderId };
            OrderDetails = await OrderServices.GetOrder<GetOrderDetailsByIdRequestModel, OrderResponseModel>(request);
        }
        catch
        {
            OrderDetails = null;
        }

        isLoading = false;
    }

    private string GetStatusClass(string status) => status?.ToLower() switch
    {
        "delivered" => "status delivered",
        "outfordelivery" => "status out-for-delivery",
        "cancelled" => "status cancelled",
        "pending" => "status pending",
        _ => "status"
    };


    private decimal Subtotal => OrderDetails?.OrderItems?.Sum(x => x.Quantity * x.Price) ?? 0;
    private decimal TotalPaid => Subtotal + (OrderDetails?.DeliveryCharges ?? 0) + (OrderDetails?.RainCharges ?? 0);

    private void TrackOrder()
    {
        Navigation.NavigateTo($"/track-order/{OrderId}");
    }

    private void DownloadInvoice()
    {
        Console.WriteLine("Download invoice triggered.");
    }
}
