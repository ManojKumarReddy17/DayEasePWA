@page "/mobile-number"
@inject NavigationManager Navigation
@using Blazored.LocalStorage
@using DayEaseServices.Services
@using DayEaseServices.Services.IServices
@using Domain.RequestModels
@inject IRegistration RegistrationService
@using System.Text.Json
@inject IJSRuntime JS
@inject ILocalStorageService LocalStorage

<style>
html, body {
    margin: 0;
    padding: 0;
    height: 100%;
    width: 100%;
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    background-color: #008CFF;
    background-image: url('/images/login-bg.png');
    background-size: cover;
    background-position: center;
    overflow-x: hidden;
    overflow-y: auto;
}

.main-container {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    min-height: 100vh;
    width: 100%;
    max-width: 500px;
    margin: 0 auto;
    padding: 2rem 1rem;
    box-sizing: border-box;
}

.logo {
    width: 35vw;
    max-width: 160px;
    min-width: 100px;
    height: auto;
    margin-bottom: 1.5rem;
}

h3 {
    color: #ffffff;
    margin-bottom: 1rem;
    font-size: clamp(1.2rem, 5vw, 2rem);
    text-align: center;
}

.form-group {
    width: 100%;
    margin-bottom: 1rem;
}

label {
    display: block;
    margin-bottom: 0.25rem;
    color: #ffffff;
    font-size: clamp(0.9rem, 3.5vw, 1.1rem);
}

input.form-control {
    width: 100%;
    padding: 0.75rem;
    border-radius: 10px;
    border: none;
    font-size: clamp(1rem, 4vw, 1.1rem);
}

button.btn-primary {
    width: 100%;
    background: #00CFFF;
    color: #fff;
    font-weight: bold;
    padding: 0.75rem;
    border: none;
    border-radius: 10px;
    font-size: clamp(1rem, 4vw, 1.1rem);
    margin-top: 1rem;
}

p {
    margin-top: 1.5rem;
    color: #ffffff;
    font-size: clamp(0.9rem, 3.5vw, 1rem);
    text-align: center;
}

a {
    color: #ffffff;
    font-weight: 600;
    text-decoration: underline;
}

    .validation-error {
        color: #ff0000;
        font-weight: 500;
        font-size: 0.95rem;
        margin-top: 0.5rem;
    }
/* @@media (max-width: 360px) {
    .logo {
        width: 90px;
    }
} */

/* Modal Styles */
.modal-backdrop {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0,0,0,0.6);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 9999;
}

.modal-box {
    background: white;
    color: black;
    padding: 1.5rem 2rem;
    border-radius: 10px;
    width: 300px;
    text-align: center;
    box-shadow: 0 4px 15px rgba(0,0,0,0.3);
}

.modal-box p {
    margin-bottom: 1rem;
    font-weight: 600;
    color:black;
}

.btn-primary-modal {
    background-color: #00c2ff;
    color: white;
    border: none;
    padding: 10px 20px;
    margin-right: 10px;
    border-radius: 6px;
    cursor: pointer;
}

.btn-primary-modal:hover {
    background-color: #009edb;
}

.btn-secondary-modal {
    background-color: #ccc;
    color: black;
    border: none;
    padding: 10px 20px;
    border-radius: 6px;
    cursor: pointer;
}

.btn-secondary-modal:hover {
    background-color: #aaa;
}

</style>

<div class="main-container">
    <img src="images/login-logo_v01.png" alt="Day Ease Logo" class="logo" />

    <h3>Enter Mobile Number</h3>

    <div class="form-group">
        <label>Country Code</label>
        <input type="text" value="+91" class="form-control" disabled />
    </div>


    <div class="form-group">
        <label for="mobile">Mobile Number:</label>
        <input id="mobile"
               class="form-control @(HasValidationError ? "error" : "")"
               @bind="PhoneNumber"
               @oninput="LimitToTenDigits"
               onkeypress="return isNumberKey(event)"
               placeholder="Enter mobile number"
               maxlength="10"
               inputmode="numeric"
               pattern="[0-9]*" />

        @if (HasValidationError && !string.IsNullOrEmpty(errorMessage))
        {
            <div class="validation-error">@errorMessage</div>
        }
    </div>

    <button class="btn-primary" @onclick="RegisterUser">Send OTP</button>

    <div class="text-center mt-3">
        <a href="/login" class="text-decoration-none text-white-custom">Already have an account? Login</a>
    </div>
</div>

@if (ShowUserExistsModal)
{
    <div class="modal-backdrop">
        <div class="modal-box">
            <p>User already exists. Please login or use a different number.</p>
            <button class="btn-primary-modal" @onclick="NavigateToLogin">Login</button>
            <button class="btn-secondary-modal" @onclick="CloseModal">Cancel</button>
        </div>
    </div>
}


@code {
    private string PhoneNumber = "";
    private string CountryCode = "+91";
    private string errorMessage = "";
    private bool HasValidationError = false;

    private bool ShowUserExistsModal = false;

    private async Task RegisterUser()
    {
        HasValidationError = false;
        errorMessage = "";

        if (PhoneNumber.Length != 10 || !PhoneNumber.All(char.IsDigit))
        {
            errorMessage = "Please enter a valid 10-digit mobile number.";
            HasValidationError = true;
            return;
        }

        try
        {
            var request = new MobileNumberRequest
                {
                    phonenumber = PhoneNumber,
                    // CountryCode = CountryCode
                };

            var response = await RegistrationService.PostAsync<MobileNumberRequest, string>(request);

            if (!string.IsNullOrEmpty(response))
            {
                string jsonString = response.Trim('\"').Replace("\\\"", "\"");

                var registrationResponse = JsonSerializer.Deserialize<RegistrationResponse>(jsonString);

                if (registrationResponse != null)
                {
                    if (registrationResponse.StatusCode == 200)
                    {
                        await LocalStorage.SetItemAsync("PhoneNumber", PhoneNumber);
                        Navigation.NavigateTo("/otp-verification");
                    }
                    else if (registrationResponse.StatusCode == 409)
                    {

                        ShowUserExistsModal = true;
                    }
                    else
                    {
                        await JS.InvokeVoidAsync("alert", registrationResponse.Message ?? "Unexpected response.");
                    }
                }
                else
                {
                    await JS.InvokeVoidAsync("alert", "Could not parse response.");
                }
            }
            else
            {
                await JS.InvokeVoidAsync("alert", "Failed to send OTP.");
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Error: {ex.Message}");
        }
    }

    private void LimitToTenDigits(ChangeEventArgs e)
    {
        string input = e.Value?.ToString() ?? "";
        PhoneNumber = new string(input.Where(char.IsDigit).Take(10).ToArray());
    }


    private void NavigateToLogin()
    {
        ShowUserExistsModal = false;
        Navigation.NavigateTo("/login");
    }

    private void CloseModal()
    {
        ShowUserExistsModal = false;
    }
}
