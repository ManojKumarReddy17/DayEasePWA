@page "/productcategory"
@inject IProductCategory ProductCategoryService
@using DayEaseServices.Services.IServices
@inject IUserLocationService UserLocationService
@inject ICartService CartService
@using Domain.RequestModels
@using DayEaseUserApp.Layout
@inject NavigationManager Navigation
@using Microsoft.AspNetCore.WebUtilities
@layout NavMenu
@inject IJSRuntime JS
@using System.Linq
@implements IDisposable

@inject UserLocationState UserLocation
<style>
    .page-container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 20px;
        background: linear-gradient(135deg, #f5f7fa 0%, #e4e8f0 100%);
        min-height: 100vh;
    }

    /* Style for page title */
    .page-title {
        margin-top: 20px;
        font-size: 24px;
    }

    /* Product grid */
    .product-container {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
        gap: 25px;
        padding: 10px;
    }

    /* Product card with colorful accents */
    .product-card {
        border-radius: 12px;
        overflow: hidden;
        box-shadow: 0 4px 12px rgba(0,0,0,0.1);
        transition: all 0.3s ease;
        background: white;
        position: relative;
        border-top: 4px solid #4a90e2; /* Blue accent border */
    }

        .product-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 16px rgba(0,0,0,0.15);
        }

    /* Product image */
    .product-image-container {
        position: relative;
        height: 200px;
        overflow: hidden;
        background: #f8f9fa; /* Light gray fallback */
        display: grid;
        place-items: center; /* Centers the image both horizontally and vertically */
    }

        .product-image-container img {
            max-height: 100%;
            max-width: 100%;
            object-fit: cover;
        }


    .product-image {
        width: 100%;
        height: 100%;
        object-fit: cover;
        transition: transform 0.3s ease;
    }

    .product-card:hover .product-image {
        transform: scale(1.05);
    }

    /* Cart button */
    .cart-btn {
        background-color: #007bff;
        color: white;
        padding: 6px 12px;
        border: none;
        border-radius: 8px;
        font-size: 14px;
        height: 36px;
        cursor: pointer;
        transition: background-color 0.2s ease;
        white-space: nowrap;
    }

        .cart-btn:hover {
            background-color: forestgreen /* Green on hover */
        }

        .cart-btn.added {
            background-color: #007bff !important; /* Blue */
            color: white;
        }

            .cart-btn.added:hover {
                background-color: #1E90FF !important; /* Dark Green */
            }

    /* New styles for quantity layout */
    .cart-controls {
        display: flex;
        align-items: center;
        justify-content: space-between;
        margin-top: 8px;
        gap: 8px;
    }


    .quantity {
        font-weight: bold;
        font-size: 16px;
        width: 32px;
        text-align: center;
        color: #333;
    }



    .top-navbar {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 15px 30px;
        background-color: #ffffff;
        border-bottom: 1px solid #e5e5e5;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    }

    /* Logo container */
    .navbar-left {
        flex: 1; /* Takes available space */
    }

    .navbar-right {
        display: flex;
        gap: 15px;
    }

    .nav-btn {
        padding: 8px 15px;
        border: none;
        border-radius: 5px;
        background: #f0f0f0;
        cursor: pointer;
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        gap: 5px;
    }

        /* Optional: Hover styles */
        .nav-btn:hover {
            background: #e0e0e0;
        }

    /* Product details with subtle gradient */
    .product-card {
        border-radius: 12px;
        overflow: hidden;
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        transition: all 0.3s ease;
        background: white;
    }

    .product-image-container {
        position: relative;
        height: 200px;
        overflow: hidden;
    }

    .product-image {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }

    .product-details {
        padding: 10px;
        text-align: center;
    }

    .price {
        font-weight: bold;
        margin: 8px 0;
    }

    .product-description span {
        color: #666;
        font-size: 0.9em;
        margin-left: 5px;
    }

    /* Delivery Info */
    .delivery-info {
        padding: 8px 16px;
        background-color: #f8f8f8;
        font-size: 14px;
        display: flex;
        justify-content: space-between;
    }

    /* Categories Navigation */
    .categories-nav {
        margin: 1rem 0;
    }

    .categories-scroll {
        display: flex;
        overflow-x: auto;
        gap: 1rem;
        padding: 0.5rem 0;
        scrollbar-width: none; /* Hide scrollbar in Firefox */
    }

        .categories-scroll::-webkit-scrollbar {
            display: none; /* Hide scrollbar in Chrome/Safari */
        }

    .category-btn {
        display: flex;
        flex-direction: column;
        align-items: center;
        background: none;
        border: none;
        padding: 0.5rem;
        min-width: 70px;
        cursor: pointer;
        font-size: 0.8rem;
        color: #555;
        transition: color 0.2s ease, border-bottom 0.2s ease;
    }

        .category-btn i {
            font-size: 1.2rem;
            margin-bottom: 0.3rem;
            transition: color 0.2s ease;
        }

        /* Active (selected) category style */
        .category-btn.active {
            color: #007bff;
            font-weight: bold;
            border-bottom: 2px solid #007bff; /* ✅ Visual underline */
        }

            .category-btn.active i {
                color: #007bff;
            }

    .fas {
        font-family: 'Font Awesome 6 Free' !important;
        font-weight: 900;
        display: inline-block;
    }

    .loading-wrapper {
        display: flex;
        justify-content: center;
        align-items: center;
        min-height: 300px;
    }

    .loading-spinner {
        position: relative;
        width: 80px;
        height: 80px;
    }

    .spinner-border {
        position: absolute;
        top: 0;
        left: 0;
        width: 80px;
        height: 80px;
        border: 6px solid #f3f3f3;
        border-top: 6px solid #007bff;
        border-radius: 50%;
        animation: spin 1s linear infinite;
        box-sizing: border-box;
    }

    .spinner-image {
        position: absolute;
        top: 50%;
        left: 50%;
        width: 40px;
        height: 40px;
        transform: translate(-50%, -50%);
        z-index: 1;
    }

    @@keyframes spin {
        0% {
            transform: rotate(0deg);
        }

        100% {
            transform: rotate(360deg);
        }
    }
    /* Responsive adjustments*/
    @@media (max-width: 768px) {
        .product-container {
            grid-template-columns: repeat(2, 1fr);
            */ gap: 15px;
        }

        .cart-summary {
            bottom: 15px;
            right: 15px;
            padding: 12px 15px;
        }

        @@media (max-width: 768px) {
            .top-navbar {
                padding: 10px 15px;
            }

            .logo {
                height: 50px; /* Smaller on mobile */
            }

            .nav-btn {
                padding: 6px 12px;
                font-size: 14px;
            }
        }
    }

    .store-header-wrapper {
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 10px;
        padding: 8px 12px;
    }

    .store-title-box {
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 12px;
        background: linear-gradient(to right, #007bff, #00c6ff);
        color: white;
        padding: 12px 24px;
        border-radius: 50px;
        box-shadow: 0 8px 24px rgba(0, 123, 255, 0.35);
        width: 100%;
        max-width: 500px;
        height: 60px;
    }

    .page-title {
        font-size: 22px;
        font-weight: 600;
        margin: 0;
    }

    .distance {
    }

    .shop-icon {
        font-size: 28px;
        color: white;
    }

    /*new one*/
    /* Match height and alignment with store title box */
    .search-container {
        display: flex;
        align-items: center;
        justify-content: space-between;
        border-radius: 50px;
        background: #fff;
        box-shadow: 0 6px 20px rgba(0, 123, 255, 0.1);
        padding: 0 12px;
        height: 60px; /* Match store-title height */
        width: 100%;
        max-width: 500px;
    }

    .search-input {
        flex: 1;
        border: none;
        background: transparent;
        font-size: 16px;
        padding: 12px;
        outline: none;
        border-radius: 50px;
    }

    .search-button {
        background-color: #007bff;
        border: none;
        color: white;
        padding: 10px 16px;
        border-radius: 50px;
        cursor: pointer;
        transition: all 0.3s ease;
    }

        .search-button:hover {
            background-color: #0056b3;
        }

    @@media (min-width: 768px) {
        .store-header-wrapper {
            flex-direction: row;
            justify-content: space-between;
            max-width: 1200px;
            margin: 0 auto 30px auto;
        }
    }

    /* ---------------------------------
                MODAL BACKDROP & ANIMATION
                ---------------------------------- */
    .modal-backdrop {
        position: fixed;
        top: 0;
        left: 0;
        width: 100vw;
        height: 100vh;
        background-color: rgba(0, 0, 0, 0.6);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1000;
        padding: 10px;
        box-sizing: border-box;
    }

    @@keyframes fadeInScale {
        0% {
            opacity: 0;
            transform: scale(0.9);
        }

        100% {
            opacity: 1;
            transform: scale(1);
        }
    }

    /* ---------------------------------
                MODAL CONTENT BOX
                ---------------------------------- */
    .popup-action-row {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-top: 20px;
        gap: 10px;
    }

    .product-price {
        font-size: 1.2rem;
        font-weight: bold;
        color: #333;
    }

    /* For inline add-to-cart button */
    .add-btn-inline {
        background-color: #007bff;
        color: white;
        border: none;
        border-radius: 10px;
        padding: 10px 20px;
        font-size: 16px;
        cursor: pointer;
        transition: background-color 0.2s ease;
    }

        .add-btn-inline:hover {
            background-color: #0056b3;
        }

    /* Inline version of cart controls */
    .cart-controls-inline {
        display: flex;
        align-items: center;
        gap: 10px;
    }

        .cart-controls-inline .cart-btn {
            padding: 8px 14px;
            font-size: 1.2rem;
            border-radius: 8px;
        }


    .modal-close-icon {
        position: absolute;
        top: 12px;
        right: 16px;
        background: transparent;
        border: none;
        font-size: 1.8rem;
        font-weight: bold;
        color: #555;
        cursor: pointer;
        transition: color 0.2s ease;
        z-index: 2;
    }

        .modal-close-icon:hover {
            color: #000;
        }

    .modal-content {
        background-color: #ffffff;
        border-radius: 20px;
        padding: 10px 10px;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.25);
        width: 300px;
        max-width: 500px;
        animation: fadeInScale 0.3s ease;
        position: relative;
        overflow-y: auto;
        max-height: 90vh;
        box-sizing: border-box;
    }

    /* ---------------------------------
                PRODUCT IMAGE INSIDE MODAL
                ---------------------------------- */
    .popup-image {
        width: 100px;
        max-height: 250px;
        object-fit: contain;
        border-radius: 12px;
        margin-bottom: 15px;
        margin-left: auto;
        margin-right: auto;
        display: block;
    }

    /* ---------------------------------
                PRODUCT DETAILS IN MODAL
                ---------------------------------- */
    .modal-content h4 {
        font-size: 1.4rem;
        font-weight: 600;
        margin-bottom: 10px;
        color: #333;
        text-align: left;
    }

    .modal-content p {
        font-size: 1rem;
        margin: 8px 0;
        color: #555;
        text-align: left;
    }

    /* ---------------------------------
                QUANTITY CONTROLS
                ---------------------------------- */
    .cart-controls {
        display: flex;
        justify-content: center;
        align-items: center;
        gap: 12px;
        margin: 15px 0;
    }

    .cart-btn.plus,
    .cart-btn.minus {
        background-color: #007bff;
        border: none;
        border-radius: 8px;
        padding: 8px 14px;
        font-size: 1.2rem;
        color: white;
        cursor: pointer;
        transition: background-color 0.2s ease;
    }

        .cart-btn.plus:hover {
            background-color: green;
        }

        .cart-btn.minus:hover {
            background-color: red;
        }

    .quantity {
        font-size: 1.2rem;
        font-weight: bold;
        color: #333;
        min-width: 40px;
        text-align: center;
    }

    /* ---------------------------------
                ACTION BUTTON ROW
                ---------------------------------- */
    .popup-button-row {
        display: flex;
        justify-content: space-between;
        gap: 10px;
        margin-top: 20px;
    }

    .cart-btn.add-btn {
        background-color: #007bff;
        color: white;
        flex: 1;
        border: none;
        border-radius: 10px;
        padding: 10px 16px;
        font-size: 16px;
        cursor: pointer;
        transition: background-color 0.2s ease;
    }

    .cart-btn.close-btn {
        background-color: #6c757d;
        color: white;
        flex: 1;
        border: none;
        border-radius: 10px;
        padding: 10px 16px;
        font-size: 16px;
        cursor: pointer;
        transition: background-color 0.2s ease;
    }

    .cart-btn.add-btn:hover {
        background-color: #0056b3;
    }

    .cart-btn.close-btn:hover {
        background-color: #5a6268;
    }

    /* ---------------------------------
                RESPONSIVE STYLES
                ---------------------------------- */
    @@media (max-width: 600px) {
        .modal-content {
            padding: 16px;
            border-radius: 16px;
            max-height: 95vh;
        }

        .product-price {
            font-size: 0.8rem;
            font-weight: bold;
            color: #333;
        }

        .popup-image {
            max-height: 180px;
        }

        .cart-btn.plus,
        .cart-btn.minus {
            padding: 6px 12px;
        }

        .quantity {
            font-size: 1rem;
        }

        .popup-button-row {
            flex-direction: column;
            gap: 12px;
        }

        .cart-btn.add-btn,
        .cart-btn.close-btn {
            width: 100%;
        }

        .store-title-flex {
            flex-direction: column;
            align-items: flex-start;
            gap: 10px;
            padding: 16px;
        }
    }

    @@media (min-width: 601px) and (max-width: 1024px) {
        .modal-content {
            max-width: 450px;
        }

        .popup-image {
            max-height: 220px;
        }

        .store-title-flex {
            flex-direction: column;
            align-items: flex-start;
            gap: 10px;
            padding: 16px;
        }
    }



    /* Unified stepper style */
    .price-action-row {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-top: 12px;
    }

    .stepper {
        display: flex;
        align-items: center;
        gap: 1px;
        background-color: #007bff;
        border-radius: 10px;
        height: 36px;
    }

        .stepper button {
            background: transparent;
            border: none;
            font-size: 0.8rem;
            color: white;
            cursor: pointer;
            font-weight: bold;
        }

        .stepper span {
            min-width: 24px;
            text-align: center;
            font-size: 1rem;
            color: white;
            font-weight: 600;
        }

    .popup-inline-row {
        display: flex;
        justify-content: space-between;
        align-items: center;
        gap: 12px;
        margin-top: 16px;
    }



    /* Unified cart button styling */
    .cart-toggle-button {
        display: flex;
        align-items: center;
        background-color: #007bff;
        color: white;
        padding: 8px 16px;
        border-radius: 10px;
        gap: 1px;
        font-size: 1.1rem;
        font-weight: bold;
        cursor: default;
        min-width: 100px;
        justify-content: center;
    }

    .cart-toggle-button {
        cursor: pointer;
        color: white;
        font-weight: bold;
        font-size: 1.2rem;
        user-select: none;
        transition: color 0.2s ease;
    }

    .toggle-icon {
        background: transparent;
        border: none;
        font-size: 1.2rem;
        color: white;
        cursor: pointer;
        font-weight: bold;
    }

    .cart-toggle-button .toggle-icon:hover {
        color: #ccc;
    }

    .cart-toggle-button .toggle-qty {
        min-width: 24px;
        text-align: center;
    }

    /* "Add to Cart" fallback button style (if not yet in cart) */
    .cart-btn.add-btn-inline {
        background-color: #007bff;
        color: white;
        border: none;
        padding: 8px 16px;
        font-size: 1rem;
        border-radius: 10px;
        font-weight: bold;
        cursor: pointer;
        transition: background-color 0.2s ease;
    }

        .cart-btn.add-btn-inline:hover {
            background-color: #0056b3;
        }


    .store-title-flex {
        display: flex;
        justify-content: space-between;
        align-items: center;
        gap: 20px;
        padding: 12px 24px;
        border-radius: 50px;
        background: linear-gradient(to right, #007bff, #00c6ff);
        color: white;
        width: 100%;
        max-width: 100%;
        box-shadow: 0 8px 24px rgba(0, 123, 255, 0.35);
        flex-wrap: wrap;
    }

    .store-left {
        display: flex;
        align-items: center;
        gap: 12px;
        flex-wrap: wrap;
    }

    .shop-icon {
        font-size: 28px;
        color: white;
    }

    .page-title {
        font-size: 22px;
        font-weight: 600;
        margin: 0;
    }

    .distance-info {
        display: flex;
        align-items: center;
        gap: 8px;
        font-size: 16px;
        background-color: rgba(255, 255, 255, 0.1);
        padding: 6px 12px;
        border-radius: 20px;
    }

    .location-icon {
        font-size: 18px;
        color: white;
    }

    .distance-text {
        color: white;
        font-weight: 500;
    }

</style>


<!-- Store Header -->
<div class="store-header-wrapper">
    <div class="store-title-box store-title-flex">
        <div class="store-left">
            <i class="bi bi-shop shop-icon"></i>
            <h2 class="page-title">@StoreName</h2>
        </div>

        <div class="distance-info">
            <i class="bi bi-geo-alt-fill location-icon"></i>
            <span class="distance-text">@DistanceInKm.ToString("0.0") KM</span>
        </div>
    </div>

    <!-- Search Bar -->
    <div class="search-container">
        <input type="text"
               @bind="searchQuery"
               class="search-input"
               placeholder='Search for "apple juice"'
               @onkeydown="HandleSearchKey" />
        <button class="search-button" @onclick="SearchProducts" aria-label="Search">
            <i class="bi bi-search"></i>
        </button>
    </div>
</div>

<!-- Categories -->
<div class="categories-nav">
    <div class="categories-scroll">
        @foreach (var cat in Categories)
        {
            <button class="category-btn @(selectedCategory == cat.Name ? "active" : "")"
                    @onclick="() => FilterByCategory(cat.Name, cat.ProductCategoryId)">
                <i class="@(!string.IsNullOrWhiteSpace(cat.Icon) ? cat.Icon : "bi bi-box")"></i> @cat.Name
            </button>
        }
    </div>
</div>

<!-- Product Display Logic -->
@if (isFirstLoad)
{
    <div class="loading-wrapper">
        <div class="loading-spinner text-center">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <img src="images/login-logo_v01.png" alt="Loading" class="spinner-image mt-2" />
        </div>
    </div>
}
else if (filteredProducts != null && filteredProducts.Count > 0)
{
    <div class="product-container">
        @foreach (var product in filteredProducts)
        {
            <div class="product-card">
                <div class="product-image-container" @onclick="() => OpenPopup(product)" style="cursor: pointer;">
                    <img src="images/@product.ProductImg" alt="@product.ProductName" />
                </div>
          
                <div class="product-details">
                    <h4>@product.ProductName</h4>

                    <div class="price-action-row">
                        <p class="product-price">@FormatCurrency(product.Price)</p>

                        @if (CartService.CartItems.ContainsKey(product.ProductId))
                        {
                            <div class="stepper">
                                <button @onclick="() => UpdateQuantity(product.ProductId, false)">➖</button>
                                <span class="quantity">@CartService.CartItems[product.ProductId].quantity</span>
                                <button @onclick="() => UpdateQuantity(product.ProductId, true)">➕</button>
                            </div>
                        }
                        else
                        {
                            <button class="cart-btn" @onclick="() => AddToCart(product)">Add to Cart</button>
                        }
                    </div>

                </div>
            </div>
        }

        <div @ref="sentinel"
             class="scroll-sentinel"
             style="height: 1px; visibility:@(allProductsLoaded ? "hidden" : "visible");">
        </div>
    </div>

    @if (showPopup && selectedProduct != null)
    {
        <div class="modal-backdrop" @onclick="ClosePopup">
            <div class="modal-content" @onclick:stopPropagation="true">
                <button class="modal-close-icon" @onclick="ClosePopup" aria-label="Close">
                    &times;
                </button>

                <img src="images/@selectedProduct.ProductImg" class="popup-image" alt="Selected Product" />
                <h4>@selectedProduct.ProductName</h4>
                <p>@selectedProduct.ProductDesc</p>

                <div class="price-action-row">
                    <p class="product-price">@FormatCurrency(selectedProduct.Price)</p>

                    @if (CartService.CartItems.ContainsKey(selectedProduct.ProductId))
                    {
                        <div class="stepper">


                            <button @onclick="() => UpdateQuantity(selectedProduct.ProductId, false)">➖</button>
                            <span class="quantity">@CartService.CartItems[selectedProduct.ProductId].quantity</span>
                            <button @onclick="() => UpdateQuantity(selectedProduct.ProductId, true)">➕</button>

                        </div>
                    }
                    else
                    {
                        <div class="action-buttons">
                            <button class="cart-btn" @onclick="() => AddToCart(selectedProduct)">Add to Cart</button>
                        </div>
                    }
                </div>
            </div>
        </div>
    }
}
else
{
    <div class="no-products">No products found</div>
}

@code {
    private string searchQuery = "";
    private List<ProductRequestModel> products = new();
    private List<ProductRequestModel> filteredProducts = new();
    private Dictionary<string, (ProductRequestModel product, int quantity)> cart = new();

    private int currentPage = 1;
    private int pageSize = 5;
    private bool isLoading = false;
    private bool allProductsLoaded = false;
    private bool isFirstLoad = true;
    private List<CartModel> cartItems = new();
    private string selectedCategoryId = null;
    private string selectedCategory = "All";
    private string StoreId;
    private string StoreName;
    private double DistanceInKm;
    private List<CategoryRequest> Categories = new();

    private ElementReference sentinel;
    private DotNetObjectReference<ProductCategory> objRef;
    bool showPopup = false;
    ProductRequestModel selectedProduct;

    protected override async Task OnInitializedAsync()
    {
        isFirstLoad = true; // show spinner early

        var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
        var queryParams = QueryHelpers.ParseQuery(uri.Query);

        if (queryParams.TryGetValue("storeId", out var storeId))
        {
            StoreId = storeId;
            StoreName = queryParams.TryGetValue("storeName", out var name) ? name : "Store";
            DistanceInKm = queryParams.TryGetValue("DistanceInKm", out var distanceStr) &&
                           double.TryParse(distanceStr, out var dist) ? dist : 0;

            var categoryInput = new StoreProdCategoryRequestModel { StoreId = StoreId };
            var categoryDtos = await ProductCategoryService.GetProductcategoByStoreId(categoryInput);

            Categories = categoryDtos.Select(dto => new CategoryRequest
            {
                Name = dto.ProductCategoryName,
                Icon = "bi bi-grid",
                StoreId = StoreId,
                ProductCategoryId = dto.ProductCategoryId
            }).ToList();

            Categories.Insert(0, new CategoryRequest
            {
                Name = "All",
                Icon = "bi bi-grid",
                StoreId = StoreId,
                ProductCategoryId = null
            });

            // Don't show products until both categories + products are loaded
            await FilterByCategory("All", null);

            isFirstLoad = false; // loading complete
        }
    }




    private async Task FilterByCategory(string categoryName, string categoryId)
    {
        selectedCategory = categoryName;
        selectedCategoryId = categoryId;
        searchQuery = "";

        products.Clear();
        filteredProducts.Clear();
        currentPage = 1;
        allProductsLoaded = false;

        await LoadMoreProducts(categoryName == "All" ? null : categoryId);
        ApplyFilters();
    }

    private async Task SearchProducts()
    {
        if (string.IsNullOrWhiteSpace(searchQuery))
        {
            await FilterByCategory(selectedCategory, selectedCategoryId);
            return;
        }

        filteredProducts = products
            .Where(p =>
                (string.IsNullOrEmpty(selectedCategoryId) || p.CategoryId == selectedCategoryId) &&
                (
                    (!string.IsNullOrEmpty(p.ProductName) && p.ProductName.Contains(searchQuery, StringComparison.OrdinalIgnoreCase)) ||
                    (!string.IsNullOrEmpty(p.ProductDesc) && p.ProductDesc.Contains(searchQuery, StringComparison.OrdinalIgnoreCase))
                )
            ).ToList();

        StateHasChanged();
    }

    private async Task LoadMoreProducts(string categoryId = null)
    {
        if (isLoading || allProductsLoaded) return;

        isLoading = true;

        var request = new PaginationQueryInput
        {
            Product = new ProductRequestModel
            {
                StoreId = StoreId,
                CategoryId = string.IsNullOrWhiteSpace(categoryId) ? null : categoryId
            },
            PaginationInput = new PaginationInput
            {
                PageNumber = currentPage,
                PageSize = pageSize
            }
        };

        var result = await ProductCategoryService.GetProductsByStoreId(request);

        if (result?.Result?.Items != null && result.Result.Items.Any())
        {
            var newProducts = result.Result.Items.Select(p => new ProductRequestModel
            {
                ProductId = p.ProductId,
                StoreId = p.StoreId,
                CategoryId = p.CategoryId,
                ProductName = p.ProductName,
                ProductDesc = p.ProductDesc,
                Price = p.Price,
                Discount = p.Discount,
                ProductImg = p.ProductImg
            }).ToList();

            products.AddRange(newProducts);
            currentPage++;
        }
        else
        {
            allProductsLoaded = true;
        }

        ApplyFilters();
        isLoading = false;
    }




    private void ApplyFilters()
    {
        filteredProducts = products
            .Where(p => (string.IsNullOrEmpty(selectedCategoryId) || p.CategoryId == selectedCategoryId)
                        && (string.IsNullOrWhiteSpace(searchQuery)
                            || ((p.ProductName?.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ?? false)
                                || (p.ProductDesc?.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ?? false))))
            .ToList();
    }

    [JSInvokable]
    public async Task OnScrollNearBottom()
    {
        await LoadMoreProducts(selectedCategoryId);
    }

    private async Task TrySetupInfiniteScroll()
    {
        if (sentinel.Id != null && !allProductsLoaded)
        {
            await JS.InvokeVoidAsync("setupInfiniteScroll", sentinel, objRef);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            objRef = DotNetObjectReference.Create(this);
            await TrySetupInfiniteScroll();
        }
    }

    protected override void OnInitialized()
    {
        CartService.OnChange += StateHasChanged;
    }

    public void Dispose() => objRef?.Dispose();

    // private void AddToCart(string productId, string name)
    // {
    //     CartService.AddToCart(productId, name, 1);
    //     StateHasChanged();
    // }

    private void OpenPopup(ProductRequestModel product)
    {
        selectedProduct = product;
        showPopup = true;
    }

    private void ClosePopup()
    {
        showPopup = false;
        selectedProduct = null;
    }
    @code {

        private async Task AddToCart(ProductRequestModel product)
        {
            UserLocation = await UserLocationService.GetUserLocationAsync();
            CartService.AddToCart(product.ProductId, null, 1);

            var model = new CartModel
            {
                UserId = UserLocation.UserId,
                ProductId = product.ProductId,
                StoreId = StoreId,
                Quantity = 1
            };

            await CartService.AddCartItems(model); // <-- POST to API
           
        await CartService.LoadCartItemCountAsync(model);
        }

        private async Task UpdateQuantity(string productId, bool increase)
        {
            var cartItem = CartService.CartItems.GetValueOrDefault(productId);
            if (cartItems == null)
                return;

            if (increase)
            {
                CartService.IncreaseQuantity(productId);

                var request = new CartModel
                {
                    UserId = UserLocation.UserId
                };

                var result = await CartService.GetCartItemsByUserId(request);
                var lst = result.Where(x => x.ProductId == productId).FirstOrDefault();

                var cartupdate = new CartModel
                {
                    CartItemId = lst.CartItemId,
                    UserId = UserLocation.UserId,
                    ProductId = productId,
                    StoreId = StoreId,
                    Quantity = cartItem.quantity + 1

                };
                await CartService.UpdateCartItems(cartupdate);
                await CartService.LoadCartItemCountAsync(cartupdate);
            }
            else
            {
                if (cartItem.quantity <= 1)
                {

                    var request = new CartModel
                    {
                        UserId = UserLocation.UserId
                    };
                    var result = await CartService.GetCartItemsByUserId(request);
                    var lst = result.Where(x => x.ProductId == productId).FirstOrDefault();


                    var cartremove = new CartModel
                    {
                        CartItemId = lst.CartItemId,
                        UserId = UserLocation.UserId,
                        ProductId = productId,
                        StoreId = StoreId,


                    };
                    await CartService.RemoveCartItems(cartremove);
                    await CartService.LoadCartItemCountAsync(cartremove);
                }
                else
                {
                    CartService.DecreaseQuantity(productId);

                    var request = new CartModel
                    {
                        UserId = UserLocation.UserId
                    };
                    var result = await CartService.GetCartItemsByUserId(request);
                    var lst = result.Where(x => x.ProductId == productId).FirstOrDefault();

                    var cartupdate = new CartModel
                    {
                        CartItemId = lst.CartItemId,
                        UserId = UserLocation.UserId,
                        ProductId = productId,
                        StoreId = StoreId,
                        Quantity = cartItem.quantity - 1

                    };
                    await CartService.UpdateCartItems(cartupdate);
                    await CartService.LoadCartItemCountAsync(cartupdate);
                }
            }
        }
    }
    private void IncreaseQuantity(string productId)
    {
        if (cart.ContainsKey(productId))
            cart[productId] = (cart[productId].product, cart[productId].quantity + 1);
    }

    private void DecreaseQuantity(string productId)
    {
        if (cart.ContainsKey(productId))
        {
            int newQty = cart[productId].quantity - 1;
            if (newQty > 0)
                cart[productId] = (cart[productId].product, newQty);
            else
                cart.Remove(productId);
        }
    }

    private void BuyNow(ProductRequestModel product)
    {
        Console.WriteLine($"Buying {product.ProductName}");
    }

    private int GetCartCount() => cart.Values.Sum(item => item.quantity);

    private string FormatCurrency(decimal amount) => "₹" + amount.ToString("0.00");
    private async Task HandleSearchKey(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
            await SearchProducts();
    }

}
